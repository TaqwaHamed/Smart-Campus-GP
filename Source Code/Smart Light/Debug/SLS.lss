
SLS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000f06  00000f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800064  00800064  00000f9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000248  00000000  00000000  0000100c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002145  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd5  00000000  00000000  00003399  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016c7  00000000  00000000  0000416e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  00005838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf5  00000000  00000000  00005d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b2c  00000000  00000000  00006a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00008595  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e0       	ldi	r30, 0x06	; 6
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 36       	cpi	r26, 0x68	; 104
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 98 00 	call	0x130	; 0x130 <main>
  8a:	0c 94 81 07 	jmp	0xf02	; 0xf02 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_voidWriteTime>:
u8 Local_u8EEpromWRRIS_Hours = 17;
u8 Local_u8EEpromWRRIS_Min = 20;


void EEPROM_voidWriteTime(u8 Local_u8EEpromWRSET_HOURS,u8 Local_u8EEpromWRSET_MIN,u8 Local_u8EEpromWRRIS_Hours ,u8 Local_u8EEpromWRRIS_Min) // this Will change later
{
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	d8 2f       	mov	r29, r24
  9a:	c6 2f       	mov	r28, r22
  9c:	12 2f       	mov	r17, r18
	EEPROM_enumWriteByte(HOUR_SUNRISE,Local_u8EEpromWRRIS_Hours);
  9e:	64 2f       	mov	r22, r20
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 3a 01 	call	0x274	; 0x274 <EEPROM_enumWriteByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	83 ec       	ldi	r24, 0xC3	; 195
  aa:	99 e0       	ldi	r25, 0x09	; 9
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <EEPROM_voidWriteTime+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <EEPROM_voidWriteTime+0x20>
  b2:	00 00       	nop
	_delay_ms(10);
	EEPROM_enumWriteByte(MINUTE_SUNRISE,Local_u8EEpromWRRIS_Min);
  b4:	61 2f       	mov	r22, r17
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 3a 01 	call	0x274	; 0x274 <EEPROM_enumWriteByte>
  be:	83 ec       	ldi	r24, 0xC3	; 195
  c0:	99 e0       	ldi	r25, 0x09	; 9
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <EEPROM_voidWriteTime+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <EEPROM_voidWriteTime+0x36>
  c8:	00 00       	nop
	_delay_ms(10);
	EEPROM_enumWriteByte(HOUR_SUNSET,Local_u8EEpromWRSET_HOURS);
  ca:	6d 2f       	mov	r22, r29
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 3a 01 	call	0x274	; 0x274 <EEPROM_enumWriteByte>
  d4:	83 ec       	ldi	r24, 0xC3	; 195
  d6:	99 e0       	ldi	r25, 0x09	; 9
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <EEPROM_voidWriteTime+0x46>
  dc:	00 c0       	rjmp	.+0      	; 0xde <EEPROM_voidWriteTime+0x4c>
  de:	00 00       	nop
	_delay_ms(10);
	EEPROM_enumWriteByte(MINUTE_SUNSET,Local_u8EEpromWRSET_MIN);
  e0:	6c 2f       	mov	r22, r28
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	0e 94 3a 01 	call	0x274	; 0x274 <EEPROM_enumWriteByte>
  ea:	83 ec       	ldi	r24, 0xC3	; 195
  ec:	99 e0       	ldi	r25, 0x09	; 9
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <EEPROM_voidWriteTime+0x5c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <EEPROM_voidWriteTime+0x62>
  f4:	00 00       	nop
	_delay_ms(10);
}
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	08 95       	ret

000000fe <EEPROM_ReadTime>:

void EEPROM_ReadTime(void)
{
	EEPROM_enumReadByte(HOUR_SUNSET,&Local_u8EEpromSET_HOURS);
  fe:	67 e6       	ldi	r22, 0x67	; 103
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 62 01 	call	0x2c4	; 0x2c4 <EEPROM_enumReadByte>
	EEPROM_enumReadByte(MINUTE_SUNSET,&Local_u8EEpromSET_MIN);
 10a:	66 e6       	ldi	r22, 0x66	; 102
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 62 01 	call	0x2c4	; 0x2c4 <EEPROM_enumReadByte>
	EEPROM_enumReadByte(HOUR_SUNRISE,&Local_u8EEpromRIS_Hours);
 116:	65 e6       	ldi	r22, 0x65	; 101
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <EEPROM_enumReadByte>
	EEPROM_enumReadByte(MINUTE_SUNRISE,&Local_u8EEpromRIS_Min);
 122:	64 e6       	ldi	r22, 0x64	; 100
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 62 01 	call	0x2c4	; 0x2c4 <EEPROM_enumReadByte>
 12e:	08 95       	ret

00000130 <main>:
}
int main(void)
{
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	00 d0       	rcall	.+0      	; 0x136 <main+0x6>
 136:	00 d0       	rcall	.+0      	; 0x138 <main+0x8>
 138:	1f 92       	push	r1
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
 13e:	87 ea       	ldi	r24, 0xA7	; 167
 140:	91 e6       	ldi	r25, 0x61	; 97
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <main+0x12>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x18>
 148:	00 00       	nop
	_delay_ms(100);
	ADC_VoidInit();
 14a:	0e 94 36 03 	call	0x66c	; 0x66c <ADC_VoidInit>
	LDR_SENSOR_voidInit(ADC_6);
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	0e 94 f6 01 	call	0x3ec	; 0x3ec <LDR_SENSOR_voidInit>
	I2C_voidInit();
 154:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <I2C_voidInit>
	// added : Init UART
	USART_voidInit(9600);
 158:	60 e8       	ldi	r22, 0x80	; 128
 15a:	75 e2       	ldi	r23, 0x25	; 37
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 a2 04 	call	0x944	; 0x944 <USART_voidInit>
	
	u8 local_u8SunSetFlag = SUNRISE;
	u8 Local_u8inti=0 ;
	u8 Local_u8Cluod_UpdateTime = 0;
	RTC_Time Time;
	Time.Seconds = 50;
 164:	82 e3       	ldi	r24, 0x32	; 50
 166:	89 83       	std	Y+1, r24	; 0x01
	Time.Minutes = 19;
 168:	83 e1       	ldi	r24, 0x13	; 19
 16a:	8a 83       	std	Y+2, r24	; 0x02
	Time.Hours = 17;
 16c:	81 e1       	ldi	r24, 0x11	; 17
 16e:	8b 83       	std	Y+3, r24	; 0x03
	Time.HoursMode = Hours_24;
 170:	1d 82       	std	Y+5, r1	; 0x05
	Time.AM_PM = PM;
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	8c 83       	std	Y+4, r24	; 0x04
	RTC_enumUpdateTime(&Time);
 176:	ce 01       	movw	r24, r28
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <RTC_enumUpdateTime>

	// Modified : as new deceleration
	EEPROM_voidWriteTime( Local_u8EEpromWRSET_HOURS, Local_u8EEpromWRSET_MIN, Local_u8EEpromWRRIS_Hours , Local_u8EEpromWRRIS_Min); // this function just write initial data to EEPROM
 17e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <Local_u8EEpromWRRIS_Min>
 182:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <Local_u8EEpromWRRIS_Hours>
 186:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <Local_u8EEpromWRSET_MIN>
 18a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Local_u8EEpromWRSET_HOURS>
 18e:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_voidWriteTime>
	EEPROM_ReadTime(); // to and read time and save it to the variables to be checked
 192:	0e 94 7f 00 	call	0xfe	; 0xfe <EEPROM_ReadTime>
	LDR_SENSOR_voidInit(ADC_6);
	I2C_voidInit();
	// added : Init UART
	USART_voidInit(9600);
	
	u8 local_u8SunSetFlag = SUNRISE;
 196:	01 e0       	ldi	r16, 0x01	; 1
			_delay_ms(200);
			Local_u8EEpromWRRIS_Min   = USART_u8Recieve();
			EEPROM_voidWriteTime( Local_u8EEpromWRSET_HOURS, Local_u8EEpromWRSET_MIN, Local_u8EEpromWRRIS_Hours , Local_u8EEpromWRRIS_Min); // This Function will change later in the second release
			EEPROM_ReadTime();  // Read New Time after updating
		}
		Local_u8inti=LDR_SNESOR_u8Read(ADC_6); // Reading the Temperature and convert back to analog and return the percentage of Ligh
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <LDR_SNESOR_u8Read>
 19e:	18 2f       	mov	r17, r24
		RTC_enumReadTime(&Time); // Read the Time form RTC
 1a0:	ce 01       	movw	r24, r28
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	0e 94 e6 02 	call	0x5cc	; 0x5cc <RTC_enumReadTime>

		if(Time.HoursMode==Hours_24)
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	81 11       	cpse	r24, r1
 1ac:	22 c0       	rjmp	.+68     	; 0x1f2 <main+0xc2>
		{
			/// Checking the Time is after the sunset time or before the sunrise time to keep controlling the light
			if( ((Time.Hours > Local_u8EEpromSET_HOURS) || ( Time.Hours == Local_u8EEpromSET_HOURS && Time.Minutes >= Local_u8EEpromSET_MIN )) )
 1ae:	8b 81       	ldd	r24, Y+3	; 0x03
 1b0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Local_u8EEpromSET_HOURS>
 1b4:	98 17       	cp	r25, r24
 1b6:	a0 f0       	brcs	.+40     	; 0x1e0 <main+0xb0>
 1b8:	89 13       	cpse	r24, r25
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <main+0x96>
 1bc:	2a 81       	ldd	r18, Y+2	; 0x02
 1be:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Local_u8EEpromSET_MIN>
 1c2:	29 17       	cp	r18, r25
 1c4:	78 f4       	brcc	.+30     	; 0x1e4 <main+0xb4>
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
			}
			else if ( (Time.Hours < Local_u8EEpromRIS_Hours) || ((Time.Hours == Local_u8EEpromRIS_Hours) && (Time.Minutes <= Local_u8EEpromRIS_Min) ))
 1c6:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Local_u8EEpromRIS_Hours>
 1ca:	89 17       	cp	r24, r25
 1cc:	68 f0       	brcs	.+26     	; 0x1e8 <main+0xb8>
 1ce:	89 13       	cpse	r24, r25
 1d0:	0d c0       	rjmp	.+26     	; 0x1ec <main+0xbc>
 1d2:	9a 81       	ldd	r25, Y+2	; 0x02
 1d4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 1d8:	89 17       	cp	r24, r25
 1da:	50 f4       	brcc	.+20     	; 0x1f0 <main+0xc0>
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
			}
			else
			{
				local_u8SunSetFlag = SUNRISE;
 1dc:	01 e0       	ldi	r16, 0x01	; 1
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <main+0xc2>
		if(Time.HoursMode==Hours_24)
		{
			/// Checking the Time is after the sunset time or before the sunrise time to keep controlling the light
			if( ((Time.Hours > Local_u8EEpromSET_HOURS) || ( Time.Hours == Local_u8EEpromSET_HOURS && Time.Minutes >= Local_u8EEpromSET_MIN )) )
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
 1e0:	00 e0       	ldi	r16, 0x00	; 0
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <main+0xc2>
 1e4:	00 e0       	ldi	r16, 0x00	; 0
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <main+0xc2>
			}
			else if ( (Time.Hours < Local_u8EEpromRIS_Hours) || ((Time.Hours == Local_u8EEpromRIS_Hours) && (Time.Minutes <= Local_u8EEpromRIS_Min) ))
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
 1e8:	00 e0       	ldi	r16, 0x00	; 0
 1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <main+0xc2>
			}
			else
			{
				local_u8SunSetFlag = SUNRISE;
 1ec:	01 e0       	ldi	r16, 0x01	; 1
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <main+0xc2>
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
			}
			else if ( (Time.Hours < Local_u8EEpromRIS_Hours) || ((Time.Hours == Local_u8EEpromRIS_Hours) && (Time.Minutes <= Local_u8EEpromRIS_Min) ))
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
 1f0:	00 e0       	ldi	r16, 0x00	; 0
			{
				local_u8SunSetFlag = SUNRISE;
			}
		}

		if(local_u8SunSetFlag == SUNSET) // if the Sunset time flag is raised
 1f2:	01 11       	cpse	r16, r1
 1f4:	38 c0       	rjmp	.+112    	; 0x266 <main+0x136>
		{
			/// according to the light intensity we control the LED array intensity
			if(Local_u8inti>90)
 1f6:	1b 35       	cpi	r17, 0x5B	; 91
 1f8:	38 f0       	brcs	.+14     	; 0x208 <main+0xd8>
			{
				T0_PhaseCorrectPwm(0,INVERTED); /// LED is Off
 1fa:	41 e0       	ldi	r20, 0x01	; 1
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	cb 01       	movw	r24, r22
 202:	0e 94 6f 04 	call	0x8de	; 0x8de <T0_PhaseCorrectPwm>
 206:	c8 cf       	rjmp	.-112    	; 0x198 <main+0x68>
			}
			else if(Local_u8inti<90 && Local_u8inti>70)
 208:	89 eb       	ldi	r24, 0xB9	; 185
 20a:	81 0f       	add	r24, r17
 20c:	83 31       	cpi	r24, 0x13	; 19
 20e:	40 f4       	brcc	.+16     	; 0x220 <main+0xf0>
			{
				T0_PhaseCorrectPwm(30,INVERTED);  /// LED is on by 30% of its full intensity
 210:	41 e0       	ldi	r20, 0x01	; 1
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	80 ef       	ldi	r24, 0xF0	; 240
 218:	91 e4       	ldi	r25, 0x41	; 65
 21a:	0e 94 6f 04 	call	0x8de	; 0x8de <T0_PhaseCorrectPwm>
 21e:	bc cf       	rjmp	.-136    	; 0x198 <main+0x68>
			}
			else if(Local_u8inti>50 && Local_u8inti<70)
 220:	8d ec       	ldi	r24, 0xCD	; 205
 222:	81 0f       	add	r24, r17
 224:	83 31       	cpi	r24, 0x13	; 19
 226:	40 f4       	brcc	.+16     	; 0x238 <main+0x108>
			{
				T0_PhaseCorrectPwm(50,INVERTED);	/// LED is on by 50% of its full intensity
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	88 e4       	ldi	r24, 0x48	; 72
 230:	92 e4       	ldi	r25, 0x42	; 66
 232:	0e 94 6f 04 	call	0x8de	; 0x8de <T0_PhaseCorrectPwm>
 236:	b0 cf       	rjmp	.-160    	; 0x198 <main+0x68>
			}
			else if(Local_u8inti<50 && Local_u8inti>30)
 238:	81 ee       	ldi	r24, 0xE1	; 225
 23a:	81 0f       	add	r24, r17
 23c:	83 31       	cpi	r24, 0x13	; 19
 23e:	40 f4       	brcc	.+16     	; 0x250 <main+0x120>
			{
				T0_PhaseCorrectPwm(70,INVERTED); /// LED is on by 70% of its full intensity
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	70 e0       	ldi	r23, 0x00	; 0
 246:	8c e8       	ldi	r24, 0x8C	; 140
 248:	92 e4       	ldi	r25, 0x42	; 66
 24a:	0e 94 6f 04 	call	0x8de	; 0x8de <T0_PhaseCorrectPwm>
 24e:	a4 cf       	rjmp	.-184    	; 0x198 <main+0x68>
			}
			else if(Local_u8inti<30 )
 250:	1e 31       	cpi	r17, 0x1E	; 30
 252:	08 f0       	brcs	.+2      	; 0x256 <main+0x126>
 254:	a1 cf       	rjmp	.-190    	; 0x198 <main+0x68>
			{
				T0_PhaseCorrectPwm(100,INVERTED); /// LED is on by 100% of its full intensity
 256:	41 e0       	ldi	r20, 0x01	; 1
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	88 ec       	ldi	r24, 0xC8	; 200
 25e:	92 e4       	ldi	r25, 0x42	; 66
 260:	0e 94 6f 04 	call	0x8de	; 0x8de <T0_PhaseCorrectPwm>
 264:	99 cf       	rjmp	.-206    	; 0x198 <main+0x68>
			}
		}
		else
		{
			T0_PhaseCorrectPwm(0,INVERTED); /// LED is Off
 266:	41 e0       	ldi	r20, 0x01	; 1
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	cb 01       	movw	r24, r22
 26e:	0e 94 6f 04 	call	0x8de	; 0x8de <T0_PhaseCorrectPwm>
 272:	92 cf       	rjmp	.-220    	; 0x198 <main+0x68>

00000274 <EEPROM_enumWriteByte>:
void EEPROM_void_Init(void)
{
	I2C_voidInit();
}
ERROR_STATE EEPROM_enumWriteByte(u16 Copy_u16LocationAddress , u8 Copy_u8Data)
{
 274:	0f 93       	push	r16
 276:	1f 93       	push	r17
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	18 2f       	mov	r17, r24
 27e:	d9 2f       	mov	r29, r25
 280:	06 2f       	mov	r16, r22
	ERROR_STATE Local_enum_errorState = NOK;
	Local_enum_errorState = I2C_MASTER_enumSendStart();
 282:	0e 94 e6 03 	call	0x7cc	; 0x7cc <I2C_MASTER_enumSendStart>
 286:	c8 2f       	mov	r28, r24
	if( Local_enum_errorState == OK )
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	b1 f4       	brne	.+44     	; 0x2b8 <EEPROM_enumWriteByte+0x44>
	{
		Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithWrite( 0x50|((Copy_u16LocationAddress >> 8)&0x03));
 28c:	8d 2f       	mov	r24, r29
 28e:	83 70       	andi	r24, 0x03	; 3
 290:	80 65       	ori	r24, 0x50	; 80
 292:	0e 94 25 04 	call	0x84a	; 0x84a <I2C_MASTER_enumSendSlaveAddressWithWrite>
 296:	c8 2f       	mov	r28, r24
		if( Local_enum_errorState == OK)
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	71 f4       	brne	.+28     	; 0x2b8 <EEPROM_enumWriteByte+0x44>
		{
			Local_enum_errorState = I2C_MASTER_enumSendByte((u8)Copy_u16LocationAddress);
 29c:	81 2f       	mov	r24, r17
 29e:	0e 94 38 04 	call	0x870	; 0x870 <I2C_MASTER_enumSendByte>
 2a2:	c8 2f       	mov	r28, r24
			if(Local_enum_errorState == OK)
 2a4:	81 30       	cpi	r24, 0x01	; 1
 2a6:	41 f4       	brne	.+16     	; 0x2b8 <EEPROM_enumWriteByte+0x44>
			{
				Local_enum_errorState = I2C_MASTER_enumSendByte(Copy_u8Data);
 2a8:	80 2f       	mov	r24, r16
 2aa:	0e 94 38 04 	call	0x870	; 0x870 <I2C_MASTER_enumSendByte>
 2ae:	c8 2f       	mov	r28, r24
				if(Local_enum_errorState == OK)
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	11 f4       	brne	.+4      	; 0x2b8 <EEPROM_enumWriteByte+0x44>
				{
					I2C_MASTER_voidSendSTOP();
 2b4:	0e 94 08 04 	call	0x810	; 0x810 <I2C_MASTER_voidSendSTOP>
				}
			}
		}
	}
	return Local_enum_errorState;
}
 2b8:	8c 2f       	mov	r24, r28
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	1f 91       	pop	r17
 2c0:	0f 91       	pop	r16
 2c2:	08 95       	ret

000002c4 <EEPROM_enumReadByte>:

ERROR_STATE EEPROM_enumReadByte(u16 Copy_u16LocationAddress , u8*Copy_u8Data)
{
 2c4:	ef 92       	push	r14
 2c6:	ff 92       	push	r15
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	18 2f       	mov	r17, r24
 2d0:	d9 2f       	mov	r29, r25
 2d2:	7b 01       	movw	r14, r22
	ERROR_STATE Local_enum_errorState = NOK;
	Local_enum_errorState = I2C_MASTER_enumSendStart();
 2d4:	0e 94 e6 03 	call	0x7cc	; 0x7cc <I2C_MASTER_enumSendStart>
 2d8:	c8 2f       	mov	r28, r24
	if( Local_enum_errorState == OK )
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	09 f5       	brne	.+66     	; 0x320 <EEPROM_enumReadByte+0x5c>
	{
		Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithWrite( 0x50|((Copy_u16LocationAddress >> 8)&0x03));
 2de:	d3 70       	andi	r29, 0x03	; 3
 2e0:	d0 65       	ori	r29, 0x50	; 80
 2e2:	8d 2f       	mov	r24, r29
 2e4:	0e 94 25 04 	call	0x84a	; 0x84a <I2C_MASTER_enumSendSlaveAddressWithWrite>
 2e8:	c8 2f       	mov	r28, r24
		if( Local_enum_errorState == OK)
 2ea:	81 30       	cpi	r24, 0x01	; 1
 2ec:	c9 f4       	brne	.+50     	; 0x320 <EEPROM_enumReadByte+0x5c>
		{
			Local_enum_errorState = I2C_MASTER_enumSendByte((u8)Copy_u16LocationAddress);
 2ee:	81 2f       	mov	r24, r17
 2f0:	0e 94 38 04 	call	0x870	; 0x870 <I2C_MASTER_enumSendByte>
 2f4:	c8 2f       	mov	r28, r24
			if(Local_enum_errorState == OK)
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	99 f4       	brne	.+38     	; 0x320 <EEPROM_enumReadByte+0x5c>
			{
				Local_enum_errorState = I2C_MASTER_enumSendRepeatedStart();
 2fa:	0e 94 f7 03 	call	0x7ee	; 0x7ee <I2C_MASTER_enumSendRepeatedStart>
 2fe:	c8 2f       	mov	r28, r24
				if(Local_enum_errorState == OK)
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	71 f4       	brne	.+28     	; 0x320 <EEPROM_enumReadByte+0x5c>
				{
					Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithRead(0x50|((Copy_u16LocationAddress >> 8)&0x03));
 304:	8d 2f       	mov	r24, r29
 306:	0e 94 0f 04 	call	0x81e	; 0x81e <I2C_MASTER_enumSendSlaveAddressWithRead>
 30a:	c8 2f       	mov	r28, r24
					if( Local_enum_errorState == OK )
 30c:	81 30       	cpi	r24, 0x01	; 1
 30e:	41 f4       	brne	.+16     	; 0x320 <EEPROM_enumReadByte+0x5c>
					{
						Local_enum_errorState = I2C_MASTER_enumReadByte_With_NACK(Copy_u8Data);
 310:	c7 01       	movw	r24, r14
 312:	0e 94 47 04 	call	0x88e	; 0x88e <I2C_MASTER_enumReadByte_With_NACK>
 316:	c8 2f       	mov	r28, r24
						if(Local_enum_errorState == OK)
 318:	81 30       	cpi	r24, 0x01	; 1
 31a:	11 f4       	brne	.+4      	; 0x320 <EEPROM_enumReadByte+0x5c>
						{
							I2C_MASTER_voidSendSTOP();
 31c:	0e 94 08 04 	call	0x810	; 0x810 <I2C_MASTER_voidSendSTOP>
				}
			}
		}
	}
	return Local_enum_errorState;
}
 320:	8c 2f       	mov	r24, r28
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	ff 90       	pop	r15
 32a:	ef 90       	pop	r14
 32c:	08 95       	ret

0000032e <MAP>:
	Local_u8INT=MAP(Local_u16ADCValue,750,1024,100,0);
	return Local_u8INT;
}

static f32 MAP(f32 Copy_f32Value, f32 Copy_f32INStart, f32 Copy_f32INEnd, f32 Copy_f32OutStart, f32 Copy_f3OutEnd)
{
 32e:	4f 92       	push	r4
 330:	5f 92       	push	r5
 332:	6f 92       	push	r6
 334:	7f 92       	push	r7
 336:	af 92       	push	r10
 338:	bf 92       	push	r11
 33a:	cf 92       	push	r12
 33c:	df 92       	push	r13
 33e:	ef 92       	push	r14
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
 34e:	28 97       	sbiw	r28, 0x08	; 8
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
 35a:	29 01       	movw	r4, r18
 35c:	3a 01       	movw	r6, r20
 35e:	ed 82       	std	Y+5, r14	; 0x05
 360:	fe 82       	std	Y+6, r15	; 0x06
 362:	0f 83       	std	Y+7, r16	; 0x07
 364:	18 87       	std	Y+8, r17	; 0x08
	return ((Copy_f32Value - Copy_f32INStart ) * (Copy_f3OutEnd - Copy_f32OutStart )/(Copy_f32INEnd -Copy_f32INStart ) + Copy_f32OutStart);
 366:	0e 94 00 05 	call	0xa00	; 0xa00 <__subsf3>
 36a:	69 83       	std	Y+1, r22	; 0x01
 36c:	7a 83       	std	Y+2, r23	; 0x02
 36e:	8b 83       	std	Y+3, r24	; 0x03
 370:	9c 83       	std	Y+4, r25	; 0x04
 372:	a6 01       	movw	r20, r12
 374:	95 01       	movw	r18, r10
 376:	69 8d       	ldd	r22, Y+25	; 0x19
 378:	7a 8d       	ldd	r23, Y+26	; 0x1a
 37a:	8b 8d       	ldd	r24, Y+27	; 0x1b
 37c:	9c 8d       	ldd	r25, Y+28	; 0x1c
 37e:	0e 94 00 05 	call	0xa00	; 0xa00 <__subsf3>
 382:	9b 01       	movw	r18, r22
 384:	ac 01       	movw	r20, r24
 386:	69 81       	ldd	r22, Y+1	; 0x01
 388:	7a 81       	ldd	r23, Y+2	; 0x02
 38a:	8b 81       	ldd	r24, Y+3	; 0x03
 38c:	9c 81       	ldd	r25, Y+4	; 0x04
 38e:	0e 94 9c 06 	call	0xd38	; 0xd38 <__mulsf3>
 392:	69 83       	std	Y+1, r22	; 0x01
 394:	7a 83       	std	Y+2, r23	; 0x02
 396:	8b 83       	std	Y+3, r24	; 0x03
 398:	9c 83       	std	Y+4, r25	; 0x04
 39a:	a3 01       	movw	r20, r6
 39c:	92 01       	movw	r18, r4
 39e:	c8 01       	movw	r24, r16
 3a0:	b7 01       	movw	r22, r14
 3a2:	0e 94 00 05 	call	0xa00	; 0xa00 <__subsf3>
 3a6:	9b 01       	movw	r18, r22
 3a8:	ac 01       	movw	r20, r24
 3aa:	69 81       	ldd	r22, Y+1	; 0x01
 3ac:	7a 81       	ldd	r23, Y+2	; 0x02
 3ae:	8b 81       	ldd	r24, Y+3	; 0x03
 3b0:	9c 81       	ldd	r25, Y+4	; 0x04
 3b2:	0e 94 6d 05 	call	0xada	; 0xada <__divsf3>
 3b6:	9b 01       	movw	r18, r22
 3b8:	ac 01       	movw	r20, r24
 3ba:	c6 01       	movw	r24, r12
 3bc:	b5 01       	movw	r22, r10
 3be:	0e 94 01 05 	call	0xa02	; 0xa02 <__addsf3>

}
 3c2:	28 96       	adiw	r28, 0x08	; 8
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	df 91       	pop	r29
 3d0:	cf 91       	pop	r28
 3d2:	1f 91       	pop	r17
 3d4:	0f 91       	pop	r16
 3d6:	ff 90       	pop	r15
 3d8:	ef 90       	pop	r14
 3da:	df 90       	pop	r13
 3dc:	cf 90       	pop	r12
 3de:	bf 90       	pop	r11
 3e0:	af 90       	pop	r10
 3e2:	7f 90       	pop	r7
 3e4:	6f 90       	pop	r6
 3e6:	5f 90       	pop	r5
 3e8:	4f 90       	pop	r4
 3ea:	08 95       	ret

000003ec <LDR_SENSOR_voidInit>:
#include"LDR_private.h"
#include"LDR_config.h"

void LDR_SENSOR_voidInit(u8 Copy_u8ChannelNumber)
{
	DIO_SetPinDirection(PORTA, Copy_u8ChannelNumber, INPUT);
 3ec:	40 e0       	ldi	r20, 0x00	; 0
 3ee:	68 2f       	mov	r22, r24
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <DIO_SetPinDirection>
 3f6:	08 95       	ret

000003f8 <LDR_SNESOR_u8Read>:
}


u8 LDR_SNESOR_u8Read(u8 Copy_u8ChannelNumber)
{
 3f8:	af 92       	push	r10
 3fa:	bf 92       	push	r11
 3fc:	cf 92       	push	r12
 3fe:	df 92       	push	r13
 400:	ef 92       	push	r14
 402:	ff 92       	push	r15
 404:	0f 93       	push	r16
 406:	1f 93       	push	r17
	u16 Local_u16ADCValue = 0;
//	f32 Local_f32AnalogVolt= 0;
	u8 Local_u8INT =0;
	Local_u16ADCValue = ADC_u16Read(Copy_u8ChannelNumber);
 408:	0e 94 3b 03 	call	0x676	; 0x676 <ADC_u16Read>
//	Local_f32AnalogVolt = (Local_u16ADCValue * VCC)/1024.0;
//	f64 RLDR = ((u64)Known_Res*VCC)/(VCC-Local_f32AnalogVolt);
	Local_u8INT=MAP(Local_u16ADCValue,750,1024,100,0);
 40c:	bc 01       	movw	r22, r24
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 0e 06 	call	0xc1c	; 0xc1c <__floatunsisf>
 416:	1f 92       	push	r1
 418:	1f 92       	push	r1
 41a:	1f 92       	push	r1
 41c:	1f 92       	push	r1
 41e:	0f 2e       	mov	r0, r31
 420:	a1 2c       	mov	r10, r1
 422:	b1 2c       	mov	r11, r1
 424:	f8 ec       	ldi	r31, 0xC8	; 200
 426:	cf 2e       	mov	r12, r31
 428:	f2 e4       	ldi	r31, 0x42	; 66
 42a:	df 2e       	mov	r13, r31
 42c:	f0 2d       	mov	r31, r0
 42e:	e1 2c       	mov	r14, r1
 430:	f1 2c       	mov	r15, r1
 432:	00 e8       	ldi	r16, 0x80	; 128
 434:	14 e4       	ldi	r17, 0x44	; 68
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e8       	ldi	r19, 0x80	; 128
 43a:	4b e3       	ldi	r20, 0x3B	; 59
 43c:	54 e4       	ldi	r21, 0x44	; 68
 43e:	0e 94 97 01 	call	0x32e	; 0x32e <MAP>
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fixunssfsi>
 44e:	86 2f       	mov	r24, r22
	return Local_u8INT;
}
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	bf 90       	pop	r11
 45e:	af 90       	pop	r10
 460:	08 95       	ret

00000462 <RTC_ProcessTime>:
				}
			}
		}
	}
	return Local_enumErrorState;
}
 462:	fc 01       	movw	r30, r24
 464:	db 01       	movw	r26, r22
 466:	8c 91       	ld	r24, X
 468:	82 95       	swap	r24
 46a:	8f 70       	andi	r24, 0x0F	; 15
 46c:	88 0f       	add	r24, r24
 46e:	98 2f       	mov	r25, r24
 470:	99 0f       	add	r25, r25
 472:	99 0f       	add	r25, r25
 474:	89 0f       	add	r24, r25
 476:	80 83       	st	Z, r24
 478:	9c 91       	ld	r25, X
 47a:	9f 70       	andi	r25, 0x0F	; 15
 47c:	89 0f       	add	r24, r25
 47e:	80 83       	st	Z, r24
 480:	11 96       	adiw	r26, 0x01	; 1
 482:	8c 91       	ld	r24, X
 484:	11 97       	sbiw	r26, 0x01	; 1
 486:	82 95       	swap	r24
 488:	8f 70       	andi	r24, 0x0F	; 15
 48a:	88 0f       	add	r24, r24
 48c:	98 2f       	mov	r25, r24
 48e:	99 0f       	add	r25, r25
 490:	99 0f       	add	r25, r25
 492:	89 0f       	add	r24, r25
 494:	81 83       	std	Z+1, r24	; 0x01
 496:	11 96       	adiw	r26, 0x01	; 1
 498:	9c 91       	ld	r25, X
 49a:	11 97       	sbiw	r26, 0x01	; 1
 49c:	9f 70       	andi	r25, 0x0F	; 15
 49e:	89 0f       	add	r24, r25
 4a0:	81 83       	std	Z+1, r24	; 0x01
 4a2:	14 82       	std	Z+4, r1	; 0x04
 4a4:	12 96       	adiw	r26, 0x02	; 2
 4a6:	9c 91       	ld	r25, X
 4a8:	12 97       	sbiw	r26, 0x02	; 2
 4aa:	92 95       	swap	r25
 4ac:	9f 70       	andi	r25, 0x0F	; 15
 4ae:	93 70       	andi	r25, 0x03	; 3
 4b0:	99 0f       	add	r25, r25
 4b2:	89 2f       	mov	r24, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	88 0f       	add	r24, r24
 4b8:	98 0f       	add	r25, r24
 4ba:	92 83       	std	Z+2, r25	; 0x02
 4bc:	12 96       	adiw	r26, 0x02	; 2
 4be:	8c 91       	ld	r24, X
 4c0:	8f 70       	andi	r24, 0x0F	; 15
 4c2:	98 0f       	add	r25, r24
 4c4:	92 83       	std	Z+2, r25	; 0x02
 4c6:	08 95       	ret

000004c8 <RTC_enumUpdateTime>:
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	fc 01       	movw	r30, r24
 4d2:	80 81       	ld	r24, Z
 4d4:	9d ec       	ldi	r25, 0xCD	; 205
 4d6:	89 9f       	mul	r24, r25
 4d8:	21 2d       	mov	r18, r1
 4da:	11 24       	eor	r1, r1
 4dc:	26 95       	lsr	r18
 4de:	26 95       	lsr	r18
 4e0:	26 95       	lsr	r18
 4e2:	d2 2f       	mov	r29, r18
 4e4:	d2 95       	swap	r29
 4e6:	d0 7f       	andi	r29, 0xF0	; 240
 4e8:	22 0f       	add	r18, r18
 4ea:	32 2f       	mov	r19, r18
 4ec:	33 0f       	add	r19, r19
 4ee:	33 0f       	add	r19, r19
 4f0:	23 0f       	add	r18, r19
 4f2:	82 1b       	sub	r24, r18
 4f4:	8d 2b       	or	r24, r29
 4f6:	d8 2f       	mov	r29, r24
 4f8:	df 77       	andi	r29, 0x7F	; 127
 4fa:	81 81       	ldd	r24, Z+1	; 0x01
 4fc:	89 9f       	mul	r24, r25
 4fe:	21 2d       	mov	r18, r1
 500:	11 24       	eor	r1, r1
 502:	26 95       	lsr	r18
 504:	26 95       	lsr	r18
 506:	26 95       	lsr	r18
 508:	12 2f       	mov	r17, r18
 50a:	12 95       	swap	r17
 50c:	10 7f       	andi	r17, 0xF0	; 240
 50e:	22 0f       	add	r18, r18
 510:	32 2f       	mov	r19, r18
 512:	33 0f       	add	r19, r19
 514:	33 0f       	add	r19, r19
 516:	23 0f       	add	r18, r19
 518:	82 1b       	sub	r24, r18
 51a:	18 2b       	or	r17, r24
 51c:	22 81       	ldd	r18, Z+2	; 0x02
 51e:	29 9f       	mul	r18, r25
 520:	91 2d       	mov	r25, r1
 522:	11 24       	eor	r1, r1
 524:	96 95       	lsr	r25
 526:	96 95       	lsr	r25
 528:	96 95       	lsr	r25
 52a:	92 95       	swap	r25
 52c:	90 7f       	andi	r25, 0xF0	; 240
 52e:	c4 81       	ldd	r28, Z+4	; 0x04
 530:	c1 11       	cpse	r28, r1
 532:	10 c0       	rjmp	.+32     	; 0x554 <RTC_enumUpdateTime+0x8c>
 534:	3d ec       	ldi	r19, 0xCD	; 205
 536:	23 9f       	mul	r18, r19
 538:	31 2d       	mov	r19, r1
 53a:	11 24       	eor	r1, r1
 53c:	36 95       	lsr	r19
 53e:	36 95       	lsr	r19
 540:	36 95       	lsr	r19
 542:	33 0f       	add	r19, r19
 544:	83 2f       	mov	r24, r19
 546:	88 0f       	add	r24, r24
 548:	88 0f       	add	r24, r24
 54a:	38 0f       	add	r19, r24
 54c:	23 1b       	sub	r18, r19
 54e:	c2 2b       	or	r28, r18
 550:	c9 2b       	or	r28, r25
 552:	11 c0       	rjmp	.+34     	; 0x576 <RTC_enumUpdateTime+0xae>
 554:	83 81       	ldd	r24, Z+3	; 0x03
 556:	c8 2b       	or	r28, r24
 558:	3d ec       	ldi	r19, 0xCD	; 205
 55a:	23 9f       	mul	r18, r19
 55c:	31 2d       	mov	r19, r1
 55e:	11 24       	eor	r1, r1
 560:	36 95       	lsr	r19
 562:	36 95       	lsr	r19
 564:	36 95       	lsr	r19
 566:	33 0f       	add	r19, r19
 568:	83 2f       	mov	r24, r19
 56a:	88 0f       	add	r24, r24
 56c:	88 0f       	add	r24, r24
 56e:	38 0f       	add	r19, r24
 570:	23 1b       	sub	r18, r19
 572:	c2 2b       	or	r28, r18
 574:	c9 2b       	or	r28, r25
 576:	0e 94 e6 03 	call	0x7cc	; 0x7cc <I2C_MASTER_enumSendStart>
 57a:	08 2f       	mov	r16, r24
 57c:	81 30       	cpi	r24, 0x01	; 1
 57e:	01 f5       	brne	.+64     	; 0x5c0 <RTC_enumUpdateTime+0xf8>
 580:	88 e6       	ldi	r24, 0x68	; 104
 582:	0e 94 25 04 	call	0x84a	; 0x84a <I2C_MASTER_enumSendSlaveAddressWithWrite>
 586:	08 2f       	mov	r16, r24
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	d1 f4       	brne	.+52     	; 0x5c0 <RTC_enumUpdateTime+0xf8>
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0e 94 38 04 	call	0x870	; 0x870 <I2C_MASTER_enumSendByte>
 592:	08 2f       	mov	r16, r24
 594:	81 30       	cpi	r24, 0x01	; 1
 596:	a1 f4       	brne	.+40     	; 0x5c0 <RTC_enumUpdateTime+0xf8>
 598:	8d 2f       	mov	r24, r29
 59a:	0e 94 38 04 	call	0x870	; 0x870 <I2C_MASTER_enumSendByte>
 59e:	08 2f       	mov	r16, r24
 5a0:	81 30       	cpi	r24, 0x01	; 1
 5a2:	71 f4       	brne	.+28     	; 0x5c0 <RTC_enumUpdateTime+0xf8>
 5a4:	81 2f       	mov	r24, r17
 5a6:	0e 94 38 04 	call	0x870	; 0x870 <I2C_MASTER_enumSendByte>
 5aa:	08 2f       	mov	r16, r24
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	41 f4       	brne	.+16     	; 0x5c0 <RTC_enumUpdateTime+0xf8>
 5b0:	8c 2f       	mov	r24, r28
 5b2:	0e 94 38 04 	call	0x870	; 0x870 <I2C_MASTER_enumSendByte>
 5b6:	08 2f       	mov	r16, r24
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <RTC_enumUpdateTime+0xf8>
 5bc:	0e 94 08 04 	call	0x810	; 0x810 <I2C_MASTER_voidSendSTOP>
 5c0:	80 2f       	mov	r24, r16
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	08 95       	ret

000005cc <RTC_enumReadTime>:

ERROR_STATE RTC_enumReadTime(RTC_Time * Copy_struct_ptr_Time)
{
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	1f 93       	push	r17
 5d2:	cf 93       	push	r28
 5d4:	df 93       	push	r29
 5d6:	00 d0       	rcall	.+0      	; 0x5d8 <RTC_enumReadTime+0xc>
 5d8:	1f 92       	push	r1
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	7c 01       	movw	r14, r24
	ERROR_STATE Local_enumErrorState = NOK;
	u8 Local_u8Array[3] = {0};
 5e0:	19 82       	std	Y+1, r1	; 0x01
 5e2:	1a 82       	std	Y+2, r1	; 0x02
 5e4:	1b 82       	std	Y+3, r1	; 0x03
	Local_enumErrorState = I2C_MASTER_enumSendStart();
 5e6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <I2C_MASTER_enumSendStart>
 5ea:	18 2f       	mov	r17, r24
	if(Local_enumErrorState == OK)
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	71 f5       	brne	.+92     	; 0x64c <RTC_enumReadTime+0x80>
	{
		Local_enumErrorState = I2C_MASTER_enumSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
 5f0:	88 e6       	ldi	r24, 0x68	; 104
 5f2:	0e 94 25 04 	call	0x84a	; 0x84a <I2C_MASTER_enumSendSlaveAddressWithWrite>
 5f6:	18 2f       	mov	r17, r24
		if( Local_enumErrorState== OK )
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	41 f5       	brne	.+80     	; 0x64c <RTC_enumReadTime+0x80>
		{
			Local_enumErrorState = I2C_MASTER_enumSendByte(RTC_BASE_TIME_ADDRESS);
 5fc:	80 e0       	ldi	r24, 0x00	; 0
 5fe:	0e 94 38 04 	call	0x870	; 0x870 <I2C_MASTER_enumSendByte>
 602:	18 2f       	mov	r17, r24
			if( Local_enumErrorState == OK )
 604:	81 30       	cpi	r24, 0x01	; 1
 606:	11 f5       	brne	.+68     	; 0x64c <RTC_enumReadTime+0x80>
			{
				Local_enumErrorState = I2C_MASTER_enumSendRepeatedStart();
 608:	0e 94 f7 03 	call	0x7ee	; 0x7ee <I2C_MASTER_enumSendRepeatedStart>
 60c:	18 2f       	mov	r17, r24

				if( Local_enumErrorState == OK )
 60e:	81 30       	cpi	r24, 0x01	; 1
 610:	e9 f4       	brne	.+58     	; 0x64c <RTC_enumReadTime+0x80>
				{
					Local_enumErrorState = I2C_MASTER_enumSendSlaveAddressWithRead(RTC_SLAVE_ADDRESS);
 612:	88 e6       	ldi	r24, 0x68	; 104
 614:	0e 94 0f 04 	call	0x81e	; 0x81e <I2C_MASTER_enumSendSlaveAddressWithRead>
 618:	18 2f       	mov	r17, r24
					if(Local_enumErrorState == OK)
 61a:	81 30       	cpi	r24, 0x01	; 1
 61c:	b9 f4       	brne	.+46     	; 0x64c <RTC_enumReadTime+0x80>
					{
						Local_enumErrorState = I2C_MASTER_enumReadByte_With_ACK(&Local_u8Array[0]);
 61e:	ce 01       	movw	r24, r28
 620:	01 96       	adiw	r24, 0x01	; 1
 622:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <I2C_MASTER_enumReadByte_With_ACK>
 626:	18 2f       	mov	r17, r24
						if( Local_enumErrorState == OK )
 628:	81 30       	cpi	r24, 0x01	; 1
 62a:	81 f4       	brne	.+32     	; 0x64c <RTC_enumReadTime+0x80>
						{
							Local_enumErrorState = I2C_MASTER_enumReadByte_With_ACK(&Local_u8Array[1]);
 62c:	ce 01       	movw	r24, r28
 62e:	02 96       	adiw	r24, 0x02	; 2
 630:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <I2C_MASTER_enumReadByte_With_ACK>
 634:	18 2f       	mov	r17, r24
							if(Local_enumErrorState == OK)
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	49 f4       	brne	.+18     	; 0x64c <RTC_enumReadTime+0x80>
							{
								Local_enumErrorState = I2C_MASTER_enumReadByte_With_NACK(&Local_u8Array[2]);
 63a:	ce 01       	movw	r24, r28
 63c:	03 96       	adiw	r24, 0x03	; 3
 63e:	0e 94 47 04 	call	0x88e	; 0x88e <I2C_MASTER_enumReadByte_With_NACK>
 642:	18 2f       	mov	r17, r24
								if(Local_enumErrorState == OK)
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	11 f4       	brne	.+4      	; 0x64c <RTC_enumReadTime+0x80>
								{
									I2C_MASTER_voidSendSTOP();
 648:	0e 94 08 04 	call	0x810	; 0x810 <I2C_MASTER_voidSendSTOP>
				}
			}
		}
	}

	RTC_ProcessTime( Copy_struct_ptr_Time , Local_u8Array );
 64c:	be 01       	movw	r22, r28
 64e:	6f 5f       	subi	r22, 0xFF	; 255
 650:	7f 4f       	sbci	r23, 0xFF	; 255
 652:	c7 01       	movw	r24, r14
 654:	0e 94 31 02 	call	0x462	; 0x462 <RTC_ProcessTime>
	return Local_enumErrorState;
}
 658:	81 2f       	mov	r24, r17
 65a:	0f 90       	pop	r0
 65c:	0f 90       	pop	r0
 65e:	0f 90       	pop	r0
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	ff 90       	pop	r15
 668:	ef 90       	pop	r14
 66a:	08 95       	ret

0000066c <ADC_VoidInit>:
#include"ADC_config.h"

void ADC_VoidInit (void)
{

	ADMUX_Reg =  ADC_REFERNECE_VOLTAGE | ADLAR;
 66c:	80 e6       	ldi	r24, 0x60	; 96
 66e:	87 b9       	out	0x07, r24	; 7
	ADCSRA_Reg = ADC_STATE | ADC_INTERRUPT | ADC_prescaller;
 670:	87 e8       	ldi	r24, 0x87	; 135
 672:	86 b9       	out	0x06, r24	; 6
 674:	08 95       	ret

00000676 <ADC_u16Read>:


u16 ADC_u16Read (u8 Copy_u8Channel_Id)
{
	u16 ADC_u8Result=0;
	ADMUX_Reg &=~(0b11111);
 676:	97 b1       	in	r25, 0x07	; 7
 678:	90 7e       	andi	r25, 0xE0	; 224
 67a:	97 b9       	out	0x07, r25	; 7
	//select channel
	ADMUX_Reg |= Copy_u8Channel_Id;
 67c:	97 b1       	in	r25, 0x07	; 7
 67e:	89 2b       	or	r24, r25
 680:	87 b9       	out	0x07, r24	; 7
	//start conversion
	ADCSRA_Reg |= (1 << 6);
 682:	86 b1       	in	r24, 0x06	; 6
 684:	80 64       	ori	r24, 0x40	; 64
 686:	86 b9       	out	0x06, r24	; 6
	// wait the flag to be set
	while( ( (ADCSRA_Reg >> 4)& 1) == 0 );
 688:	34 9b       	sbis	0x06, 4	; 6
 68a:	fe cf       	rjmp	.-4      	; 0x688 <ADC_u16Read+0x12>
#if ADLAR == ADC_LEFT_ADJUST_DISABEL
	ADC_u8Result = ADCL_Reg | (ADCH_Reg <<8 );

#elif ADLAR == ADC_LEFT_ADJUST_ENABLE
	ADC_u8Result = (ADCH_Reg << 2);
 68c:	85 b1       	in	r24, 0x05	; 5
 68e:	90 e0       	ldi	r25, 0x00	; 0
#endif

	// clear flag
	ADCSRA_Reg |= (1 << 4);
 690:	26 b1       	in	r18, 0x06	; 6
 692:	20 61       	ori	r18, 0x10	; 16
 694:	26 b9       	out	0x06, r18	; 6

	return ADC_u8Result;
}
 696:	88 0f       	add	r24, r24
 698:	99 1f       	adc	r25, r25
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	08 95       	ret

000006a0 <DIO_SetPinDirection>:

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
	/* Make sure that the Port ID and Pin ID are in the valid range */
		if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
 6a0:	84 30       	cpi	r24, 0x04	; 4
 6a2:	08 f0       	brcs	.+2      	; 0x6a6 <DIO_SetPinDirection+0x6>
 6a4:	7b c0       	rjmp	.+246    	; 0x79c <DIO_SetPinDirection+0xfc>
 6a6:	68 30       	cpi	r22, 0x08	; 8
 6a8:	08 f0       	brcs	.+2      	; 0x6ac <DIO_SetPinDirection+0xc>
 6aa:	7a c0       	rjmp	.+244    	; 0x7a0 <DIO_SetPinDirection+0x100>
		{
			if ( u8PinDirCopy == OUTPUT )
 6ac:	41 30       	cpi	r20, 0x01	; 1
 6ae:	c1 f5       	brne	.+112    	; 0x720 <DIO_SetPinDirection+0x80>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
 6b0:	81 30       	cpi	r24, 0x01	; 1
 6b2:	91 f0       	breq	.+36     	; 0x6d8 <DIO_SetPinDirection+0x38>
 6b4:	28 f0       	brcs	.+10     	; 0x6c0 <DIO_SetPinDirection+0x20>
 6b6:	82 30       	cpi	r24, 0x02	; 2
 6b8:	d9 f0       	breq	.+54     	; 0x6f0 <DIO_SetPinDirection+0x50>
 6ba:	83 30       	cpi	r24, 0x03	; 3
 6bc:	29 f1       	breq	.+74     	; 0x708 <DIO_SetPinDirection+0x68>
 6be:	72 c0       	rjmp	.+228    	; 0x7a4 <DIO_SetPinDirection+0x104>
				{
					case PORTA: SET_BIT(DDRA_REG,u8PinIdCopy); break;
 6c0:	2a b3       	in	r18, 0x1a	; 26
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	02 c0       	rjmp	.+4      	; 0x6cc <DIO_SetPinDirection+0x2c>
 6c8:	88 0f       	add	r24, r24
 6ca:	99 1f       	adc	r25, r25
 6cc:	6a 95       	dec	r22
 6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <DIO_SetPinDirection+0x28>
 6d0:	82 2b       	or	r24, r18
 6d2:	8a bb       	out	0x1a, r24	; 26

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 6d4:	81 e0       	ldi	r24, 0x01	; 1
			if ( u8PinDirCopy == OUTPUT )
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
				{
					case PORTA: SET_BIT(DDRA_REG,u8PinIdCopy); break;
 6d6:	08 95       	ret
					case PORTB: SET_BIT(DDRB_REG,u8PinIdCopy); break;
 6d8:	27 b3       	in	r18, 0x17	; 23
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	02 c0       	rjmp	.+4      	; 0x6e4 <DIO_SetPinDirection+0x44>
 6e0:	88 0f       	add	r24, r24
 6e2:	99 1f       	adc	r25, r25
 6e4:	6a 95       	dec	r22
 6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <DIO_SetPinDirection+0x40>
 6e8:	82 2b       	or	r24, r18
 6ea:	87 bb       	out	0x17, r24	; 23

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 6ec:	81 e0       	ldi	r24, 0x01	; 1
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
				{
					case PORTA: SET_BIT(DDRA_REG,u8PinIdCopy); break;
					case PORTB: SET_BIT(DDRB_REG,u8PinIdCopy); break;
 6ee:	08 95       	ret
					case PORTC: SET_BIT(DDRC_REG,u8PinIdCopy); break;
 6f0:	24 b3       	in	r18, 0x14	; 20
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <DIO_SetPinDirection+0x5c>
 6f8:	88 0f       	add	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	6a 95       	dec	r22
 6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <DIO_SetPinDirection+0x58>
 700:	82 2b       	or	r24, r18
 702:	84 bb       	out	0x14, r24	; 20

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 704:	81 e0       	ldi	r24, 0x01	; 1
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
				{
					case PORTA: SET_BIT(DDRA_REG,u8PinIdCopy); break;
					case PORTB: SET_BIT(DDRB_REG,u8PinIdCopy); break;
					case PORTC: SET_BIT(DDRC_REG,u8PinIdCopy); break;
 706:	08 95       	ret
					case PORTD: SET_BIT(DDRD_REG,u8PinIdCopy); break;
 708:	21 b3       	in	r18, 0x11	; 17
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_SetPinDirection+0x74>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	6a 95       	dec	r22
 716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_SetPinDirection+0x70>
 718:	82 2b       	or	r24, r18
 71a:	81 bb       	out	0x11, r24	; 17

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 71c:	81 e0       	ldi	r24, 0x01	; 1
				switch (u8PortIdCopy)
				{
					case PORTA: SET_BIT(DDRA_REG,u8PinIdCopy); break;
					case PORTB: SET_BIT(DDRB_REG,u8PinIdCopy); break;
					case PORTC: SET_BIT(DDRC_REG,u8PinIdCopy); break;
					case PORTD: SET_BIT(DDRD_REG,u8PinIdCopy); break;
 71e:	08 95       	ret
				}
			}

			else if ( u8PinDirCopy == INPUT )
 720:	41 11       	cpse	r20, r1
 722:	42 c0       	rjmp	.+132    	; 0x7a8 <DIO_SetPinDirection+0x108>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
 724:	81 30       	cpi	r24, 0x01	; 1
 726:	99 f0       	breq	.+38     	; 0x74e <DIO_SetPinDirection+0xae>
 728:	28 f0       	brcs	.+10     	; 0x734 <DIO_SetPinDirection+0x94>
 72a:	82 30       	cpi	r24, 0x02	; 2
 72c:	e9 f0       	breq	.+58     	; 0x768 <DIO_SetPinDirection+0xc8>
 72e:	83 30       	cpi	r24, 0x03	; 3
 730:	41 f1       	breq	.+80     	; 0x782 <DIO_SetPinDirection+0xe2>
 732:	3c c0       	rjmp	.+120    	; 0x7ac <DIO_SetPinDirection+0x10c>
				{
					case PORTA: CLR_BIT(DDRA_REG,u8PinIdCopy); break;
 734:	2a b3       	in	r18, 0x1a	; 26
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <DIO_SetPinDirection+0xa0>
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	6a 95       	dec	r22
 742:	e2 f7       	brpl	.-8      	; 0x73c <DIO_SetPinDirection+0x9c>
 744:	80 95       	com	r24
 746:	82 23       	and	r24, r18
 748:	8a bb       	out	0x1a, r24	; 26

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 74a:	81 e0       	ldi	r24, 0x01	; 1
			else if ( u8PinDirCopy == INPUT )
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
				{
					case PORTA: CLR_BIT(DDRA_REG,u8PinIdCopy); break;
 74c:	08 95       	ret
					case PORTB: CLR_BIT(DDRB_REG,u8PinIdCopy); break;
 74e:	27 b3       	in	r18, 0x17	; 23
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_SetPinDirection+0xba>
 756:	88 0f       	add	r24, r24
 758:	99 1f       	adc	r25, r25
 75a:	6a 95       	dec	r22
 75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_SetPinDirection+0xb6>
 75e:	80 95       	com	r24
 760:	82 23       	and	r24, r18
 762:	87 bb       	out	0x17, r24	; 23

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 764:	81 e0       	ldi	r24, 0x01	; 1
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
				{
					case PORTA: CLR_BIT(DDRA_REG,u8PinIdCopy); break;
					case PORTB: CLR_BIT(DDRB_REG,u8PinIdCopy); break;
 766:	08 95       	ret
					case PORTC: CLR_BIT(DDRC_REG,u8PinIdCopy); break;
 768:	24 b3       	in	r18, 0x14	; 20
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <DIO_SetPinDirection+0xd4>
 770:	88 0f       	add	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <DIO_SetPinDirection+0xd0>
 778:	80 95       	com	r24
 77a:	82 23       	and	r24, r18
 77c:	84 bb       	out	0x14, r24	; 20

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 77e:	81 e0       	ldi	r24, 0x01	; 1
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
				{
					case PORTA: CLR_BIT(DDRA_REG,u8PinIdCopy); break;
					case PORTB: CLR_BIT(DDRB_REG,u8PinIdCopy); break;
					case PORTC: CLR_BIT(DDRC_REG,u8PinIdCopy); break;
 780:	08 95       	ret
					case PORTD: CLR_BIT(DDRD_REG,u8PinIdCopy); break;
 782:	21 b3       	in	r18, 0x11	; 17
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_SetPinDirection+0xee>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	6a 95       	dec	r22
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_SetPinDirection+0xea>
 792:	80 95       	com	r24
 794:	82 23       	and	r24, r18
 796:	81 bb       	out	0x11, r24	; 17

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 798:	81 e0       	ldi	r24, 0x01	; 1
				switch (u8PortIdCopy)
				{
					case PORTA: CLR_BIT(DDRA_REG,u8PinIdCopy); break;
					case PORTB: CLR_BIT(DDRB_REG,u8PinIdCopy); break;
					case PORTC: CLR_BIT(DDRC_REG,u8PinIdCopy); break;
					case PORTD: CLR_BIT(DDRD_REG,u8PinIdCopy); break;
 79a:	08 95       	ret
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	08 95       	ret
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	08 95       	ret

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	08 95       	ret
				}
			}

			else
			{
				LOC_enumState = DIO_OK ;
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	08 95       	ret

}

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
 7ac:	81 e0       	ldi	r24, 0x01	; 1
		else
		{
			LOC_enumState = DIO_NOK ;
		}
       return LOC_enumState;
}
 7ae:	08 95       	ret

000007b0 <I2C_voidInit>:
	/* Pre-scaler 1 */
	CLR_BIT( TWSR , 0 );
	CLR_BIT( TWSR , 1 );
	/* Speed due to 8MHz Clock Frequency Crystal */
	TWBR = Copy_structConfigurations.speed;
	TWCR->Bit.TWEN = 1; // Enable the IIC Circuit
 7b0:	82 e0       	ldi	r24, 0x02	; 2
 7b2:	82 b9       	out	0x02, r24	; 2
 7b4:	81 b1       	in	r24, 0x01	; 1
 7b6:	8e 7f       	andi	r24, 0xFE	; 254
 7b8:	81 b9       	out	0x01, r24	; 1
 7ba:	81 b1       	in	r24, 0x01	; 1
 7bc:	8d 7f       	andi	r24, 0xFD	; 253
 7be:	81 b9       	out	0x01, r24	; 1
 7c0:	80 e2       	ldi	r24, 0x20	; 32
 7c2:	80 b9       	out	0x00, r24	; 0
 7c4:	86 b7       	in	r24, 0x36	; 54
 7c6:	84 60       	ori	r24, 0x04	; 4
 7c8:	86 bf       	out	0x36, r24	; 54
 7ca:	08 95       	ret

000007cc <I2C_MASTER_enumSendStart>:

ERROR_STATE I2C_MASTER_enumSendStart(void)
{
	ERROR_STATE State = NOK;
	// Setting the Start Condition Bit
	TWCR->Bit.TWSTA = 1;
 7cc:	86 b7       	in	r24, 0x36	; 54
 7ce:	80 62       	ori	r24, 0x20	; 32
 7d0:	86 bf       	out	0x36, r24	; 54
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
 7d2:	86 b7       	in	r24, 0x36	; 54
 7d4:	80 68       	ori	r24, 0x80	; 128
 7d6:	86 bf       	out	0x36, r24	; 54
	// pooling the Flag
	while( ! TWCR->Bit.TWINT );
 7d8:	06 b6       	in	r0, 0x36	; 54
 7da:	07 fe       	sbrs	r0, 7
 7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <I2C_MASTER_enumSendStart+0xc>
	// Checking the Status Register Value With START CONDITION
	if ( (TWSR & 0xF8) == 0x08 )
 7de:	81 b1       	in	r24, 0x01	; 1
 7e0:	88 7f       	andi	r24, 0xF8	; 248
 7e2:	88 30       	cpi	r24, 0x08	; 8
 7e4:	11 f0       	breq	.+4      	; 0x7ea <I2C_MASTER_enumSendStart+0x1e>
	TWCR->Bit.TWEN = 1; // Enable the IIC Circuit
}

ERROR_STATE I2C_MASTER_enumSendStart(void)
{
	ERROR_STATE State = NOK;
 7e6:	80 e0       	ldi	r24, 0x00	; 0
 7e8:	08 95       	ret
	// pooling the Flag
	while( ! TWCR->Bit.TWINT );
	// Checking the Status Register Value With START CONDITION
	if ( (TWSR & 0xF8) == 0x08 )
	{
		State = OK;
 7ea:	81 e0       	ldi	r24, 0x01	; 1
	}

	return State;

}
 7ec:	08 95       	ret

000007ee <I2C_MASTER_enumSendRepeatedStart>:
ERROR_STATE I2C_MASTER_enumSendRepeatedStart(void)
{
	ERROR_STATE State = NOK;
	// Setting the Start Condition Bit
	TWCR->Bit.TWSTA = 1;
 7ee:	86 b7       	in	r24, 0x36	; 54
 7f0:	80 62       	ori	r24, 0x20	; 32
 7f2:	86 bf       	out	0x36, r24	; 54
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
 7f4:	86 b7       	in	r24, 0x36	; 54
 7f6:	80 68       	ori	r24, 0x80	; 128
 7f8:	86 bf       	out	0x36, r24	; 54
	// pooling the Flag
	while( ! TWCR->Bit.TWINT );
 7fa:	06 b6       	in	r0, 0x36	; 54
 7fc:	07 fe       	sbrs	r0, 7
 7fe:	fd cf       	rjmp	.-6      	; 0x7fa <I2C_MASTER_enumSendRepeatedStart+0xc>
	// Checking the Status Register Value with MASTER REPEATED START CONDITION
	if ( (TWSR & 0xF8) == 0x10 )
 800:	81 b1       	in	r24, 0x01	; 1
 802:	88 7f       	andi	r24, 0xF8	; 248
 804:	80 31       	cpi	r24, 0x10	; 16
 806:	11 f0       	breq	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
	return State;

}
ERROR_STATE I2C_MASTER_enumSendRepeatedStart(void)
{
	ERROR_STATE State = NOK;
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	08 95       	ret
	// pooling the Flag
	while( ! TWCR->Bit.TWINT );
	// Checking the Status Register Value with MASTER REPEATED START CONDITION
	if ( (TWSR & 0xF8) == 0x10 )
	{
		State = OK;
 80c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return State;
}
 80e:	08 95       	ret

00000810 <I2C_MASTER_voidSendSTOP>:

void I2C_MASTER_voidSendSTOP(void)
{
	// Setting the Stop Condition Bit
	TWCR->Bit.TWSTO = 1;
 810:	86 b7       	in	r24, 0x36	; 54
 812:	80 61       	ori	r24, 0x10	; 16
 814:	86 bf       	out	0x36, r24	; 54
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
 816:	86 b7       	in	r24, 0x36	; 54
 818:	80 68       	ori	r24, 0x80	; 128
 81a:	86 bf       	out	0x36, r24	; 54
 81c:	08 95       	ret

0000081e <I2C_MASTER_enumSendSlaveAddressWithRead>:

ERROR_STATE I2C_MASTER_enumSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
	ERROR_STATE State = NOK;
	// Writing the Address of the Slave
	TWDR =  ( Copy_u8SlaveAddress << 1 ) | 0x01 ;
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	81 60       	ori	r24, 0x01	; 1
 826:	83 b9       	out	0x03, r24	; 3
	// Clearing the Start Condition
	TWCR->Bit.TWSTA = 0;
 828:	86 b7       	in	r24, 0x36	; 54
 82a:	8f 7d       	andi	r24, 0xDF	; 223
 82c:	86 bf       	out	0x36, r24	; 54
	// Clearing the flag
	TWCR->Bit.TWINT = 1;
 82e:	86 b7       	in	r24, 0x36	; 54
 830:	80 68       	ori	r24, 0x80	; 128
 832:	86 bf       	out	0x36, r24	; 54
	// pooling the Flag
	while(! TWCR->Bit.TWINT);
 834:	06 b6       	in	r0, 0x36	; 54
 836:	07 fe       	sbrs	r0, 7
 838:	fd cf       	rjmp	.-6      	; 0x834 <I2C_MASTER_enumSendSlaveAddressWithRead+0x16>
	if ( (TWSR & 0xF8) == 0x40)
 83a:	81 b1       	in	r24, 0x01	; 1
 83c:	88 7f       	andi	r24, 0xF8	; 248
 83e:	80 34       	cpi	r24, 0x40	; 64
 840:	11 f0       	breq	.+4      	; 0x846 <I2C_MASTER_enumSendSlaveAddressWithRead+0x28>
	TWCR->Bit.TWINT = 1;
}

ERROR_STATE I2C_MASTER_enumSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
	ERROR_STATE State = NOK;
 842:	80 e0       	ldi	r24, 0x00	; 0
 844:	08 95       	ret
	TWCR->Bit.TWINT = 1;
	// pooling the Flag
	while(! TWCR->Bit.TWINT);
	if ( (TWSR & 0xF8) == 0x40)
	{
		State = OK;
 846:	81 e0       	ldi	r24, 0x01	; 1
	}
	return State;
}
 848:	08 95       	ret

0000084a <I2C_MASTER_enumSendSlaveAddressWithWrite>:

ERROR_STATE I2C_MASTER_enumSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
	ERROR_STATE State = NOK;
	// Writing the Address of the Slave
	TWDR =  ( Copy_u8SlaveAddress << 1 ) ;
 84a:	88 0f       	add	r24, r24
 84c:	83 b9       	out	0x03, r24	; 3
	// Clearing the Start Condition
	TWCR->Bit.TWSTA = 0;
 84e:	86 b7       	in	r24, 0x36	; 54
 850:	8f 7d       	andi	r24, 0xDF	; 223
 852:	86 bf       	out	0x36, r24	; 54
	// Clearing the flag
	TWCR->Bit.TWINT = 1;
 854:	86 b7       	in	r24, 0x36	; 54
 856:	80 68       	ori	r24, 0x80	; 128
 858:	86 bf       	out	0x36, r24	; 54
	// pooling the Flag
	while(! TWCR->Bit.TWINT);
 85a:	06 b6       	in	r0, 0x36	; 54
 85c:	07 fe       	sbrs	r0, 7
 85e:	fd cf       	rjmp	.-6      	; 0x85a <I2C_MASTER_enumSendSlaveAddressWithWrite+0x10>
	if ( (TWSR & 0xF8) == 0x18)
 860:	81 b1       	in	r24, 0x01	; 1
 862:	88 7f       	andi	r24, 0xF8	; 248
 864:	88 31       	cpi	r24, 0x18	; 24
 866:	11 f0       	breq	.+4      	; 0x86c <__stack+0xd>
	return State;
}

ERROR_STATE I2C_MASTER_enumSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
	ERROR_STATE State = NOK;
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	08 95       	ret
	TWCR->Bit.TWINT = 1;
	// pooling the Flag
	while(! TWCR->Bit.TWINT);
	if ( (TWSR & 0xF8) == 0x18)
	{
		State = OK;
 86c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return State;
}
 86e:	08 95       	ret

00000870 <I2C_MASTER_enumSendByte>:

ERROR_STATE I2C_MASTER_enumSendByte(u8 Copy_u8Data)
{
	ERROR_STATE State = NOK ;
	/// Writing data to TWDR
	TWDR = Copy_u8Data;
 870:	83 b9       	out	0x03, r24	; 3
	/// Clearing the flag
	TWCR->Bit.TWINT = 1;
 872:	86 b7       	in	r24, 0x36	; 54
 874:	80 68       	ori	r24, 0x80	; 128
 876:	86 bf       	out	0x36, r24	; 54
	/// pooling the flag 
	while( !TWCR->Bit.TWINT );
 878:	06 b6       	in	r0, 0x36	; 54
 87a:	07 fe       	sbrs	r0, 7
 87c:	fd cf       	rjmp	.-6      	; 0x878 <I2C_MASTER_enumSendByte+0x8>
	if ( (TWSR&0xF8) == 0x28 )
 87e:	81 b1       	in	r24, 0x01	; 1
 880:	88 7f       	andi	r24, 0xF8	; 248
 882:	88 32       	cpi	r24, 0x28	; 40
 884:	11 f0       	breq	.+4      	; 0x88a <I2C_MASTER_enumSendByte+0x1a>
	return State;
}

ERROR_STATE I2C_MASTER_enumSendByte(u8 Copy_u8Data)
{
	ERROR_STATE State = NOK ;
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret
	TWCR->Bit.TWINT = 1;
	/// pooling the flag 
	while( !TWCR->Bit.TWINT );
	if ( (TWSR&0xF8) == 0x28 )
	{
		State = OK;
 88a:	81 e0       	ldi	r24, 0x01	; 1
	}
	return State ;
}
 88c:	08 95       	ret

0000088e <I2C_MASTER_enumReadByte_With_NACK>:
ERROR_STATE I2C_MASTER_enumReadByte_With_NACK(u8 * Copy_u8Data)
{
 88e:	fc 01       	movw	r30, r24
	ERROR_STATE State = NOK;
	/// Clearing the flag
	TWCR->Bit.TWINT = 1;
 890:	96 b7       	in	r25, 0x36	; 54
 892:	90 68       	ori	r25, 0x80	; 128
 894:	96 bf       	out	0x36, r25	; 54
	TWCR->Bit.TWEA = 0;
 896:	96 b7       	in	r25, 0x36	; 54
 898:	9f 7b       	andi	r25, 0xBF	; 191
 89a:	96 bf       	out	0x36, r25	; 54
	while( !TWCR->Bit.TWINT );
 89c:	06 b6       	in	r0, 0x36	; 54
 89e:	07 fe       	sbrs	r0, 7
 8a0:	fd cf       	rjmp	.-6      	; 0x89c <I2C_MASTER_enumReadByte_With_NACK+0xe>
	if( (TWSR&0xF8) == 0x58)
 8a2:	91 b1       	in	r25, 0x01	; 1
 8a4:	98 7f       	andi	r25, 0xF8	; 248
 8a6:	98 35       	cpi	r25, 0x58	; 88
 8a8:	21 f4       	brne	.+8      	; 0x8b2 <I2C_MASTER_enumReadByte_With_NACK+0x24>
	{
		State = OK;
		/// Reading the Data from TWDR
		*Copy_u8Data = TWDR ;
 8aa:	83 b1       	in	r24, 0x03	; 3
 8ac:	80 83       	st	Z, r24
	TWCR->Bit.TWINT = 1;
	TWCR->Bit.TWEA = 0;
	while( !TWCR->Bit.TWINT );
	if( (TWSR&0xF8) == 0x58)
	{
		State = OK;
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	08 95       	ret
	}
	return State ;
}
ERROR_STATE I2C_MASTER_enumReadByte_With_NACK(u8 * Copy_u8Data)
{
	ERROR_STATE State = NOK;
 8b2:	80 e0       	ldi	r24, 0x00	; 0
		State = OK;
		/// Reading the Data from TWDR
		*Copy_u8Data = TWDR ;
	}
	return State;
}
 8b4:	08 95       	ret

000008b6 <I2C_MASTER_enumReadByte_With_ACK>:

ERROR_STATE I2C_MASTER_enumReadByte_With_ACK( u8 * Copy_u8Buffer)
{
 8b6:	fc 01       	movw	r30, r24
	ERROR_STATE Local_enumErrorState = NOK;
	u8 Local_u8Counter = 0;
	TWCR->Bit.TWINT = 1;  //<Clearing the flag
 8b8:	96 b7       	in	r25, 0x36	; 54
 8ba:	90 68       	ori	r25, 0x80	; 128
 8bc:	96 bf       	out	0x36, r25	; 54
	TWCR->Bit.TWEA = 1;  //< Sending ACK to receive more than one byte
 8be:	96 b7       	in	r25, 0x36	; 54
 8c0:	90 64       	ori	r25, 0x40	; 64
 8c2:	96 bf       	out	0x36, r25	; 54
	while( !TWCR->Bit.TWINT);
 8c4:	06 b6       	in	r0, 0x36	; 54
 8c6:	07 fe       	sbrs	r0, 7
 8c8:	fd cf       	rjmp	.-6      	; 0x8c4 <I2C_MASTER_enumReadByte_With_ACK+0xe>
	if( (TWSR & 0xF8) == 0x50)
 8ca:	91 b1       	in	r25, 0x01	; 1
 8cc:	98 7f       	andi	r25, 0xF8	; 248
 8ce:	90 35       	cpi	r25, 0x50	; 80
 8d0:	21 f4       	brne	.+8      	; 0x8da <I2C_MASTER_enumReadByte_With_ACK+0x24>
	{
		Local_enumErrorState = OK;
		*(Copy_u8Buffer + Local_u8Counter) = TWDR;
 8d2:	83 b1       	in	r24, 0x03	; 3
 8d4:	80 83       	st	Z, r24
	TWCR->Bit.TWINT = 1;  //<Clearing the flag
	TWCR->Bit.TWEA = 1;  //< Sending ACK to receive more than one byte
	while( !TWCR->Bit.TWINT);
	if( (TWSR & 0xF8) == 0x50)
	{
		Local_enumErrorState = OK;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	08 95       	ret
	return State;
}

ERROR_STATE I2C_MASTER_enumReadByte_With_ACK( u8 * Copy_u8Buffer)
{
	ERROR_STATE Local_enumErrorState = NOK;
 8da:	80 e0       	ldi	r24, 0x00	; 0
		Local_enumErrorState = OK;
		*(Copy_u8Buffer + Local_u8Counter) = TWDR;
	}

	return Local_enumErrorState;
}
 8dc:	08 95       	ret

000008de <T0_PhaseCorrectPwm>:
}


void T0_PhaseCorrectPwm(f32 duty, u8 pulse)
{
	DDRB_REG = (1 << 3);
 8de:	28 e0       	ldi	r18, 0x08	; 8
 8e0:	27 bb       	out	0x17, r18	; 23

	switch(pulse)
 8e2:	41 30       	cpi	r20, 0x01	; 1
 8e4:	19 f0       	breq	.+6      	; 0x8ec <T0_PhaseCorrectPwm+0xe>
 8e6:	42 30       	cpi	r20, 0x02	; 2
 8e8:	d9 f0       	breq	.+54     	; 0x920 <T0_PhaseCorrectPwm+0x42>
 8ea:	08 95       	ret
	{
	case INVERTED :
		OCR0 = ((TOP-1)-(duty*(TOP-1)/100));
 8ec:	20 e0       	ldi	r18, 0x00	; 0
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	4f e7       	ldi	r20, 0x7F	; 127
 8f2:	53 e4       	ldi	r21, 0x43	; 67
 8f4:	0e 94 9c 06 	call	0xd38	; 0xd38 <__mulsf3>
 8f8:	20 e0       	ldi	r18, 0x00	; 0
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	48 ec       	ldi	r20, 0xC8	; 200
 8fe:	52 e4       	ldi	r21, 0x42	; 66
 900:	0e 94 6d 05 	call	0xada	; 0xada <__divsf3>
 904:	9b 01       	movw	r18, r22
 906:	ac 01       	movw	r20, r24
 908:	60 e0       	ldi	r22, 0x00	; 0
 90a:	70 e0       	ldi	r23, 0x00	; 0
 90c:	8f e7       	ldi	r24, 0x7F	; 127
 90e:	93 e4       	ldi	r25, 0x43	; 67
 910:	0e 94 00 05 	call	0xa00	; 0xa00 <__subsf3>
 914:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fixunssfsi>
 918:	6c bf       	out	0x3c, r22	; 60
		TCCR0 = (1 << WGM00) | (1 << COM01) | (1 << COM00) | PWM_prescaller;
 91a:	81 e7       	ldi	r24, 0x71	; 113
 91c:	83 bf       	out	0x33, r24	; 51
		break;
 91e:	08 95       	ret

	case NON_INVERTED :
		OCR0 = (duty*(TOP-1))/100;
 920:	20 e0       	ldi	r18, 0x00	; 0
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	4f e7       	ldi	r20, 0x7F	; 127
 926:	53 e4       	ldi	r21, 0x43	; 67
 928:	0e 94 9c 06 	call	0xd38	; 0xd38 <__mulsf3>
 92c:	20 e0       	ldi	r18, 0x00	; 0
 92e:	30 e0       	ldi	r19, 0x00	; 0
 930:	48 ec       	ldi	r20, 0xC8	; 200
 932:	52 e4       	ldi	r21, 0x42	; 66
 934:	0e 94 6d 05 	call	0xada	; 0xada <__divsf3>
 938:	0e 94 df 05 	call	0xbbe	; 0xbbe <__fixunssfsi>
 93c:	6c bf       	out	0x3c, r22	; 60
		TCCR0 = (1 << WGM00) | (1 << COM01) | PWM_prescaller;
 93e:	81 e6       	ldi	r24, 0x61	; 97
 940:	83 bf       	out	0x33, r24	; 51
 942:	08 95       	ret

00000944 <USART_voidInit>:

#define F_CPU 8000000UL


void USART_voidInit(u32 copy_uint8BaudRate)
{
 944:	af 92       	push	r10
 946:	bf 92       	push	r11
 948:	cf 92       	push	r12
 94a:	df 92       	push	r13
 94c:	ef 92       	push	r14
 94e:	ff 92       	push	r15
 950:	0f 93       	push	r16
 952:	1f 93       	push	r17
 954:	cf 93       	push	r28
 956:	df 93       	push	r29
	//BaudRate  9600
	u16 Local_UBRR;
	//adjust mode
		CLR_BIT(USCRC,URSEL);
 958:	20 b5       	in	r18, 0x20	; 32
 95a:	2f 77       	andi	r18, 0x7F	; 127
 95c:	20 bd       	out	0x20, r18	; 32
		#if    USART_MODE == 0
		SET_BIT(USCRC,URSEL);
 95e:	20 b5       	in	r18, 0x20	; 32
 960:	20 68       	ori	r18, 0x80	; 128
 962:	20 bd       	out	0x20, r18	; 32
		CLR_BIT(USCRC,UMSEL);
 964:	20 b5       	in	r18, 0x20	; 32
 966:	2f 7b       	andi	r18, 0xBF	; 191
 968:	20 bd       	out	0x20, r18	; 32
		Local_UBRR = (F_CPU/((u64)16*copy_uint8BaudRate))-1;
 96a:	dc 01       	movw	r26, r24
 96c:	cb 01       	movw	r24, r22
 96e:	28 2f       	mov	r18, r24
 970:	39 2f       	mov	r19, r25
 972:	4a 2f       	mov	r20, r26
 974:	5b 2f       	mov	r21, r27
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	70 e0       	ldi	r23, 0x00	; 0
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	04 e0       	ldi	r16, 0x04	; 4
 980:	0e 94 68 07 	call	0xed0	; 0xed0 <__ashldi3>
 984:	a2 2e       	mov	r10, r18
 986:	b3 2e       	mov	r11, r19
 988:	c4 2e       	mov	r12, r20
 98a:	d5 2e       	mov	r13, r21
 98c:	e6 2e       	mov	r14, r22
 98e:	f7 2e       	mov	r15, r23
 990:	08 2f       	mov	r16, r24
 992:	19 2f       	mov	r17, r25
 994:	20 e0       	ldi	r18, 0x00	; 0
 996:	32 e1       	ldi	r19, 0x12	; 18
 998:	4a e7       	ldi	r20, 0x7A	; 122
 99a:	50 e0       	ldi	r21, 0x00	; 0
 99c:	60 e0       	ldi	r22, 0x00	; 0
 99e:	70 e0       	ldi	r23, 0x00	; 0
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 94 0b 07 	call	0xe16	; 0xe16 <__udivdi3>
 9a8:	02 2f       	mov	r16, r18
 9aa:	13 2f       	mov	r17, r19
 9ac:	01 50       	subi	r16, 0x01	; 1
 9ae:	11 09       	sbc	r17, r1
		SET_BIT(USCRC,UMSEL);
		Local_UBRR = (F_CPU/((u64)2*copy_uint8BaudRate))-1;
		#endif
		
		/* Adjust UBRR */
		SET_BIT(USCRC,URSEL);
 9b0:	80 b5       	in	r24, 0x20	; 32
 9b2:	80 68       	ori	r24, 0x80	; 128
 9b4:	80 bd       	out	0x20, r24	; 32
		UBRRH = (u8)(Local_UBRR >> 8);
 9b6:	10 bd       	out	0x20, r17	; 32
		UBRRL = (u8)(Local_UBRR);
 9b8:	09 b9       	out	0x09, r16	; 9
		#elif USART_WORDSIZE == 2
		CLR_BIT(USCRC,UCSZ0);
		SET_BIT(USCRC,UCSZ1);
		CLR_BIT(USCRB,UCSZ2);
		#elif USART_WORDSIZE == 3
		SET_BIT(USCRC,UCSZ0);
 9ba:	80 b5       	in	r24, 0x20	; 32
 9bc:	82 60       	ori	r24, 0x02	; 2
 9be:	80 bd       	out	0x20, r24	; 32
		SET_BIT(USCRC,UCSZ1);
 9c0:	80 b5       	in	r24, 0x20	; 32
 9c2:	84 60       	ori	r24, 0x04	; 4
 9c4:	80 bd       	out	0x20, r24	; 32
		CLR_BIT(USCRB,UCSZ2);
 9c6:	8a b1       	in	r24, 0x0a	; 10
 9c8:	8b 7f       	andi	r24, 0xFB	; 251
 9ca:	8a b9       	out	0x0a, r24	; 10
		SET_BIT(USCRB,UCSZ2);
		#endif
		
		/* Adjust Parity */
		#if   USART_PARITY  == 0
		CLR_BIT(USCRC,UPM0);
 9cc:	80 b5       	in	r24, 0x20	; 32
 9ce:	8f 7e       	andi	r24, 0xEF	; 239
 9d0:	80 bd       	out	0x20, r24	; 32
		CLR_BIT(USCRC,UPM1);
 9d2:	80 b5       	in	r24, 0x20	; 32
 9d4:	8f 7d       	andi	r24, 0xDF	; 223
 9d6:	80 bd       	out	0x20, r24	; 32
		
		/* Adjust Stop bit */
		#if  USART_STOPBIT == 0
		CLR_BIT(USCRC,USBS);
		#else
		SET_BIT(USCRC,USBS);
 9d8:	80 b5       	in	r24, 0x20	; 32
 9da:	88 60       	ori	r24, 0x08	; 8
 9dc:	80 bd       	out	0x20, r24	; 32
		#endif
		
		/* Enable TX and RX */
		SET_BIT(USCRB,TXEN);
 9de:	8a b1       	in	r24, 0x0a	; 10
 9e0:	88 60       	ori	r24, 0x08	; 8
 9e2:	8a b9       	out	0x0a, r24	; 10
		SET_BIT(USCRB,RXEN);
 9e4:	8a b1       	in	r24, 0x0a	; 10
 9e6:	80 61       	ori	r24, 0x10	; 16
 9e8:	8a b9       	out	0x0a, r24	; 10
	
}
 9ea:	df 91       	pop	r29
 9ec:	cf 91       	pop	r28
 9ee:	1f 91       	pop	r17
 9f0:	0f 91       	pop	r16
 9f2:	ff 90       	pop	r15
 9f4:	ef 90       	pop	r14
 9f6:	df 90       	pop	r13
 9f8:	cf 90       	pop	r12
 9fa:	bf 90       	pop	r11
 9fc:	af 90       	pop	r10
 9fe:	08 95       	ret

00000a00 <__subsf3>:
 a00:	50 58       	subi	r21, 0x80	; 128

00000a02 <__addsf3>:
 a02:	bb 27       	eor	r27, r27
 a04:	aa 27       	eor	r26, r26
 a06:	0e 94 18 05 	call	0xa30	; 0xa30 <__addsf3x>
 a0a:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_round>
 a0e:	0e 94 54 06 	call	0xca8	; 0xca8 <__fp_pscA>
 a12:	38 f0       	brcs	.+14     	; 0xa22 <__addsf3+0x20>
 a14:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_pscB>
 a18:	20 f0       	brcs	.+8      	; 0xa22 <__addsf3+0x20>
 a1a:	39 f4       	brne	.+14     	; 0xa2a <__addsf3+0x28>
 a1c:	9f 3f       	cpi	r25, 0xFF	; 255
 a1e:	19 f4       	brne	.+6      	; 0xa26 <__addsf3+0x24>
 a20:	26 f4       	brtc	.+8      	; 0xa2a <__addsf3+0x28>
 a22:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_nan>
 a26:	0e f4       	brtc	.+2      	; 0xa2a <__addsf3+0x28>
 a28:	e0 95       	com	r30
 a2a:	e7 fb       	bst	r30, 7
 a2c:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_inf>

00000a30 <__addsf3x>:
 a30:	e9 2f       	mov	r30, r25
 a32:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_split3>
 a36:	58 f3       	brcs	.-42     	; 0xa0e <__addsf3+0xc>
 a38:	ba 17       	cp	r27, r26
 a3a:	62 07       	cpc	r22, r18
 a3c:	73 07       	cpc	r23, r19
 a3e:	84 07       	cpc	r24, r20
 a40:	95 07       	cpc	r25, r21
 a42:	20 f0       	brcs	.+8      	; 0xa4c <__addsf3x+0x1c>
 a44:	79 f4       	brne	.+30     	; 0xa64 <__addsf3x+0x34>
 a46:	a6 f5       	brtc	.+104    	; 0xab0 <__addsf3x+0x80>
 a48:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_zero>
 a4c:	0e f4       	brtc	.+2      	; 0xa50 <__addsf3x+0x20>
 a4e:	e0 95       	com	r30
 a50:	0b 2e       	mov	r0, r27
 a52:	ba 2f       	mov	r27, r26
 a54:	a0 2d       	mov	r26, r0
 a56:	0b 01       	movw	r0, r22
 a58:	b9 01       	movw	r22, r18
 a5a:	90 01       	movw	r18, r0
 a5c:	0c 01       	movw	r0, r24
 a5e:	ca 01       	movw	r24, r20
 a60:	a0 01       	movw	r20, r0
 a62:	11 24       	eor	r1, r1
 a64:	ff 27       	eor	r31, r31
 a66:	59 1b       	sub	r21, r25
 a68:	99 f0       	breq	.+38     	; 0xa90 <__addsf3x+0x60>
 a6a:	59 3f       	cpi	r21, 0xF9	; 249
 a6c:	50 f4       	brcc	.+20     	; 0xa82 <__addsf3x+0x52>
 a6e:	50 3e       	cpi	r21, 0xE0	; 224
 a70:	68 f1       	brcs	.+90     	; 0xacc <__addsf3x+0x9c>
 a72:	1a 16       	cp	r1, r26
 a74:	f0 40       	sbci	r31, 0x00	; 0
 a76:	a2 2f       	mov	r26, r18
 a78:	23 2f       	mov	r18, r19
 a7a:	34 2f       	mov	r19, r20
 a7c:	44 27       	eor	r20, r20
 a7e:	58 5f       	subi	r21, 0xF8	; 248
 a80:	f3 cf       	rjmp	.-26     	; 0xa68 <__addsf3x+0x38>
 a82:	46 95       	lsr	r20
 a84:	37 95       	ror	r19
 a86:	27 95       	ror	r18
 a88:	a7 95       	ror	r26
 a8a:	f0 40       	sbci	r31, 0x00	; 0
 a8c:	53 95       	inc	r21
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__addsf3x+0x52>
 a90:	7e f4       	brtc	.+30     	; 0xab0 <__addsf3x+0x80>
 a92:	1f 16       	cp	r1, r31
 a94:	ba 0b       	sbc	r27, r26
 a96:	62 0b       	sbc	r22, r18
 a98:	73 0b       	sbc	r23, r19
 a9a:	84 0b       	sbc	r24, r20
 a9c:	ba f0       	brmi	.+46     	; 0xacc <__addsf3x+0x9c>
 a9e:	91 50       	subi	r25, 0x01	; 1
 aa0:	a1 f0       	breq	.+40     	; 0xaca <__addsf3x+0x9a>
 aa2:	ff 0f       	add	r31, r31
 aa4:	bb 1f       	adc	r27, r27
 aa6:	66 1f       	adc	r22, r22
 aa8:	77 1f       	adc	r23, r23
 aaa:	88 1f       	adc	r24, r24
 aac:	c2 f7       	brpl	.-16     	; 0xa9e <__addsf3x+0x6e>
 aae:	0e c0       	rjmp	.+28     	; 0xacc <__addsf3x+0x9c>
 ab0:	ba 0f       	add	r27, r26
 ab2:	62 1f       	adc	r22, r18
 ab4:	73 1f       	adc	r23, r19
 ab6:	84 1f       	adc	r24, r20
 ab8:	48 f4       	brcc	.+18     	; 0xacc <__addsf3x+0x9c>
 aba:	87 95       	ror	r24
 abc:	77 95       	ror	r23
 abe:	67 95       	ror	r22
 ac0:	b7 95       	ror	r27
 ac2:	f7 95       	ror	r31
 ac4:	9e 3f       	cpi	r25, 0xFE	; 254
 ac6:	08 f0       	brcs	.+2      	; 0xaca <__addsf3x+0x9a>
 ac8:	b0 cf       	rjmp	.-160    	; 0xa2a <__addsf3+0x28>
 aca:	93 95       	inc	r25
 acc:	88 0f       	add	r24, r24
 ace:	08 f0       	brcs	.+2      	; 0xad2 <__addsf3x+0xa2>
 ad0:	99 27       	eor	r25, r25
 ad2:	ee 0f       	add	r30, r30
 ad4:	97 95       	ror	r25
 ad6:	87 95       	ror	r24
 ad8:	08 95       	ret

00000ada <__divsf3>:
 ada:	0e 94 81 05 	call	0xb02	; 0xb02 <__divsf3x>
 ade:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_round>
 ae2:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_pscB>
 ae6:	58 f0       	brcs	.+22     	; 0xafe <__divsf3+0x24>
 ae8:	0e 94 54 06 	call	0xca8	; 0xca8 <__fp_pscA>
 aec:	40 f0       	brcs	.+16     	; 0xafe <__divsf3+0x24>
 aee:	29 f4       	brne	.+10     	; 0xafa <__divsf3+0x20>
 af0:	5f 3f       	cpi	r21, 0xFF	; 255
 af2:	29 f0       	breq	.+10     	; 0xafe <__divsf3+0x24>
 af4:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_inf>
 af8:	51 11       	cpse	r21, r1
 afa:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_szero>
 afe:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_nan>

00000b02 <__divsf3x>:
 b02:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_split3>
 b06:	68 f3       	brcs	.-38     	; 0xae2 <__divsf3+0x8>

00000b08 <__divsf3_pse>:
 b08:	99 23       	and	r25, r25
 b0a:	b1 f3       	breq	.-20     	; 0xaf8 <__divsf3+0x1e>
 b0c:	55 23       	and	r21, r21
 b0e:	91 f3       	breq	.-28     	; 0xaf4 <__divsf3+0x1a>
 b10:	95 1b       	sub	r25, r21
 b12:	55 0b       	sbc	r21, r21
 b14:	bb 27       	eor	r27, r27
 b16:	aa 27       	eor	r26, r26
 b18:	62 17       	cp	r22, r18
 b1a:	73 07       	cpc	r23, r19
 b1c:	84 07       	cpc	r24, r20
 b1e:	38 f0       	brcs	.+14     	; 0xb2e <__divsf3_pse+0x26>
 b20:	9f 5f       	subi	r25, 0xFF	; 255
 b22:	5f 4f       	sbci	r21, 0xFF	; 255
 b24:	22 0f       	add	r18, r18
 b26:	33 1f       	adc	r19, r19
 b28:	44 1f       	adc	r20, r20
 b2a:	aa 1f       	adc	r26, r26
 b2c:	a9 f3       	breq	.-22     	; 0xb18 <__divsf3_pse+0x10>
 b2e:	35 d0       	rcall	.+106    	; 0xb9a <__divsf3_pse+0x92>
 b30:	0e 2e       	mov	r0, r30
 b32:	3a f0       	brmi	.+14     	; 0xb42 <__divsf3_pse+0x3a>
 b34:	e0 e8       	ldi	r30, 0x80	; 128
 b36:	32 d0       	rcall	.+100    	; 0xb9c <__divsf3_pse+0x94>
 b38:	91 50       	subi	r25, 0x01	; 1
 b3a:	50 40       	sbci	r21, 0x00	; 0
 b3c:	e6 95       	lsr	r30
 b3e:	00 1c       	adc	r0, r0
 b40:	ca f7       	brpl	.-14     	; 0xb34 <__divsf3_pse+0x2c>
 b42:	2b d0       	rcall	.+86     	; 0xb9a <__divsf3_pse+0x92>
 b44:	fe 2f       	mov	r31, r30
 b46:	29 d0       	rcall	.+82     	; 0xb9a <__divsf3_pse+0x92>
 b48:	66 0f       	add	r22, r22
 b4a:	77 1f       	adc	r23, r23
 b4c:	88 1f       	adc	r24, r24
 b4e:	bb 1f       	adc	r27, r27
 b50:	26 17       	cp	r18, r22
 b52:	37 07       	cpc	r19, r23
 b54:	48 07       	cpc	r20, r24
 b56:	ab 07       	cpc	r26, r27
 b58:	b0 e8       	ldi	r27, 0x80	; 128
 b5a:	09 f0       	breq	.+2      	; 0xb5e <__divsf3_pse+0x56>
 b5c:	bb 0b       	sbc	r27, r27
 b5e:	80 2d       	mov	r24, r0
 b60:	bf 01       	movw	r22, r30
 b62:	ff 27       	eor	r31, r31
 b64:	93 58       	subi	r25, 0x83	; 131
 b66:	5f 4f       	sbci	r21, 0xFF	; 255
 b68:	3a f0       	brmi	.+14     	; 0xb78 <__divsf3_pse+0x70>
 b6a:	9e 3f       	cpi	r25, 0xFE	; 254
 b6c:	51 05       	cpc	r21, r1
 b6e:	78 f0       	brcs	.+30     	; 0xb8e <__divsf3_pse+0x86>
 b70:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_inf>
 b74:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_szero>
 b78:	5f 3f       	cpi	r21, 0xFF	; 255
 b7a:	e4 f3       	brlt	.-8      	; 0xb74 <__divsf3_pse+0x6c>
 b7c:	98 3e       	cpi	r25, 0xE8	; 232
 b7e:	d4 f3       	brlt	.-12     	; 0xb74 <__divsf3_pse+0x6c>
 b80:	86 95       	lsr	r24
 b82:	77 95       	ror	r23
 b84:	67 95       	ror	r22
 b86:	b7 95       	ror	r27
 b88:	f7 95       	ror	r31
 b8a:	9f 5f       	subi	r25, 0xFF	; 255
 b8c:	c9 f7       	brne	.-14     	; 0xb80 <__divsf3_pse+0x78>
 b8e:	88 0f       	add	r24, r24
 b90:	91 1d       	adc	r25, r1
 b92:	96 95       	lsr	r25
 b94:	87 95       	ror	r24
 b96:	97 f9       	bld	r25, 7
 b98:	08 95       	ret
 b9a:	e1 e0       	ldi	r30, 0x01	; 1
 b9c:	66 0f       	add	r22, r22
 b9e:	77 1f       	adc	r23, r23
 ba0:	88 1f       	adc	r24, r24
 ba2:	bb 1f       	adc	r27, r27
 ba4:	62 17       	cp	r22, r18
 ba6:	73 07       	cpc	r23, r19
 ba8:	84 07       	cpc	r24, r20
 baa:	ba 07       	cpc	r27, r26
 bac:	20 f0       	brcs	.+8      	; 0xbb6 <__divsf3_pse+0xae>
 bae:	62 1b       	sub	r22, r18
 bb0:	73 0b       	sbc	r23, r19
 bb2:	84 0b       	sbc	r24, r20
 bb4:	ba 0b       	sbc	r27, r26
 bb6:	ee 1f       	adc	r30, r30
 bb8:	88 f7       	brcc	.-30     	; 0xb9c <__divsf3_pse+0x94>
 bba:	e0 95       	com	r30
 bbc:	08 95       	ret

00000bbe <__fixunssfsi>:
 bbe:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <__fp_splitA>
 bc2:	88 f0       	brcs	.+34     	; 0xbe6 <__fixunssfsi+0x28>
 bc4:	9f 57       	subi	r25, 0x7F	; 127
 bc6:	98 f0       	brcs	.+38     	; 0xbee <__fixunssfsi+0x30>
 bc8:	b9 2f       	mov	r27, r25
 bca:	99 27       	eor	r25, r25
 bcc:	b7 51       	subi	r27, 0x17	; 23
 bce:	b0 f0       	brcs	.+44     	; 0xbfc <__fixunssfsi+0x3e>
 bd0:	e1 f0       	breq	.+56     	; 0xc0a <__fixunssfsi+0x4c>
 bd2:	66 0f       	add	r22, r22
 bd4:	77 1f       	adc	r23, r23
 bd6:	88 1f       	adc	r24, r24
 bd8:	99 1f       	adc	r25, r25
 bda:	1a f0       	brmi	.+6      	; 0xbe2 <__fixunssfsi+0x24>
 bdc:	ba 95       	dec	r27
 bde:	c9 f7       	brne	.-14     	; 0xbd2 <__fixunssfsi+0x14>
 be0:	14 c0       	rjmp	.+40     	; 0xc0a <__fixunssfsi+0x4c>
 be2:	b1 30       	cpi	r27, 0x01	; 1
 be4:	91 f0       	breq	.+36     	; 0xc0a <__fixunssfsi+0x4c>
 be6:	0e 94 95 06 	call	0xd2a	; 0xd2a <__fp_zero>
 bea:	b1 e0       	ldi	r27, 0x01	; 1
 bec:	08 95       	ret
 bee:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__fp_zero>
 bf2:	67 2f       	mov	r22, r23
 bf4:	78 2f       	mov	r23, r24
 bf6:	88 27       	eor	r24, r24
 bf8:	b8 5f       	subi	r27, 0xF8	; 248
 bfa:	39 f0       	breq	.+14     	; 0xc0a <__fixunssfsi+0x4c>
 bfc:	b9 3f       	cpi	r27, 0xF9	; 249
 bfe:	cc f3       	brlt	.-14     	; 0xbf2 <__fixunssfsi+0x34>
 c00:	86 95       	lsr	r24
 c02:	77 95       	ror	r23
 c04:	67 95       	ror	r22
 c06:	b3 95       	inc	r27
 c08:	d9 f7       	brne	.-10     	; 0xc00 <__fixunssfsi+0x42>
 c0a:	3e f4       	brtc	.+14     	; 0xc1a <__fixunssfsi+0x5c>
 c0c:	90 95       	com	r25
 c0e:	80 95       	com	r24
 c10:	70 95       	com	r23
 c12:	61 95       	neg	r22
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	08 95       	ret

00000c1c <__floatunsisf>:
 c1c:	e8 94       	clt
 c1e:	09 c0       	rjmp	.+18     	; 0xc32 <__floatsisf+0x12>

00000c20 <__floatsisf>:
 c20:	97 fb       	bst	r25, 7
 c22:	3e f4       	brtc	.+14     	; 0xc32 <__floatsisf+0x12>
 c24:	90 95       	com	r25
 c26:	80 95       	com	r24
 c28:	70 95       	com	r23
 c2a:	61 95       	neg	r22
 c2c:	7f 4f       	sbci	r23, 0xFF	; 255
 c2e:	8f 4f       	sbci	r24, 0xFF	; 255
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	99 23       	and	r25, r25
 c34:	a9 f0       	breq	.+42     	; 0xc60 <__floatsisf+0x40>
 c36:	f9 2f       	mov	r31, r25
 c38:	96 e9       	ldi	r25, 0x96	; 150
 c3a:	bb 27       	eor	r27, r27
 c3c:	93 95       	inc	r25
 c3e:	f6 95       	lsr	r31
 c40:	87 95       	ror	r24
 c42:	77 95       	ror	r23
 c44:	67 95       	ror	r22
 c46:	b7 95       	ror	r27
 c48:	f1 11       	cpse	r31, r1
 c4a:	f8 cf       	rjmp	.-16     	; 0xc3c <__floatsisf+0x1c>
 c4c:	fa f4       	brpl	.+62     	; 0xc8c <__floatsisf+0x6c>
 c4e:	bb 0f       	add	r27, r27
 c50:	11 f4       	brne	.+4      	; 0xc56 <__floatsisf+0x36>
 c52:	60 ff       	sbrs	r22, 0
 c54:	1b c0       	rjmp	.+54     	; 0xc8c <__floatsisf+0x6c>
 c56:	6f 5f       	subi	r22, 0xFF	; 255
 c58:	7f 4f       	sbci	r23, 0xFF	; 255
 c5a:	8f 4f       	sbci	r24, 0xFF	; 255
 c5c:	9f 4f       	sbci	r25, 0xFF	; 255
 c5e:	16 c0       	rjmp	.+44     	; 0xc8c <__floatsisf+0x6c>
 c60:	88 23       	and	r24, r24
 c62:	11 f0       	breq	.+4      	; 0xc68 <__floatsisf+0x48>
 c64:	96 e9       	ldi	r25, 0x96	; 150
 c66:	11 c0       	rjmp	.+34     	; 0xc8a <__floatsisf+0x6a>
 c68:	77 23       	and	r23, r23
 c6a:	21 f0       	breq	.+8      	; 0xc74 <__floatsisf+0x54>
 c6c:	9e e8       	ldi	r25, 0x8E	; 142
 c6e:	87 2f       	mov	r24, r23
 c70:	76 2f       	mov	r23, r22
 c72:	05 c0       	rjmp	.+10     	; 0xc7e <__floatsisf+0x5e>
 c74:	66 23       	and	r22, r22
 c76:	71 f0       	breq	.+28     	; 0xc94 <__floatsisf+0x74>
 c78:	96 e8       	ldi	r25, 0x86	; 134
 c7a:	86 2f       	mov	r24, r22
 c7c:	70 e0       	ldi	r23, 0x00	; 0
 c7e:	60 e0       	ldi	r22, 0x00	; 0
 c80:	2a f0       	brmi	.+10     	; 0xc8c <__floatsisf+0x6c>
 c82:	9a 95       	dec	r25
 c84:	66 0f       	add	r22, r22
 c86:	77 1f       	adc	r23, r23
 c88:	88 1f       	adc	r24, r24
 c8a:	da f7       	brpl	.-10     	; 0xc82 <__floatsisf+0x62>
 c8c:	88 0f       	add	r24, r24
 c8e:	96 95       	lsr	r25
 c90:	87 95       	ror	r24
 c92:	97 f9       	bld	r25, 7
 c94:	08 95       	ret

00000c96 <__fp_inf>:
 c96:	97 f9       	bld	r25, 7
 c98:	9f 67       	ori	r25, 0x7F	; 127
 c9a:	80 e8       	ldi	r24, 0x80	; 128
 c9c:	70 e0       	ldi	r23, 0x00	; 0
 c9e:	60 e0       	ldi	r22, 0x00	; 0
 ca0:	08 95       	ret

00000ca2 <__fp_nan>:
 ca2:	9f ef       	ldi	r25, 0xFF	; 255
 ca4:	80 ec       	ldi	r24, 0xC0	; 192
 ca6:	08 95       	ret

00000ca8 <__fp_pscA>:
 ca8:	00 24       	eor	r0, r0
 caa:	0a 94       	dec	r0
 cac:	16 16       	cp	r1, r22
 cae:	17 06       	cpc	r1, r23
 cb0:	18 06       	cpc	r1, r24
 cb2:	09 06       	cpc	r0, r25
 cb4:	08 95       	ret

00000cb6 <__fp_pscB>:
 cb6:	00 24       	eor	r0, r0
 cb8:	0a 94       	dec	r0
 cba:	12 16       	cp	r1, r18
 cbc:	13 06       	cpc	r1, r19
 cbe:	14 06       	cpc	r1, r20
 cc0:	05 06       	cpc	r0, r21
 cc2:	08 95       	ret

00000cc4 <__fp_round>:
 cc4:	09 2e       	mov	r0, r25
 cc6:	03 94       	inc	r0
 cc8:	00 0c       	add	r0, r0
 cca:	11 f4       	brne	.+4      	; 0xcd0 <__fp_round+0xc>
 ccc:	88 23       	and	r24, r24
 cce:	52 f0       	brmi	.+20     	; 0xce4 <__fp_round+0x20>
 cd0:	bb 0f       	add	r27, r27
 cd2:	40 f4       	brcc	.+16     	; 0xce4 <__fp_round+0x20>
 cd4:	bf 2b       	or	r27, r31
 cd6:	11 f4       	brne	.+4      	; 0xcdc <__fp_round+0x18>
 cd8:	60 ff       	sbrs	r22, 0
 cda:	04 c0       	rjmp	.+8      	; 0xce4 <__fp_round+0x20>
 cdc:	6f 5f       	subi	r22, 0xFF	; 255
 cde:	7f 4f       	sbci	r23, 0xFF	; 255
 ce0:	8f 4f       	sbci	r24, 0xFF	; 255
 ce2:	9f 4f       	sbci	r25, 0xFF	; 255
 ce4:	08 95       	ret

00000ce6 <__fp_split3>:
 ce6:	57 fd       	sbrc	r21, 7
 ce8:	90 58       	subi	r25, 0x80	; 128
 cea:	44 0f       	add	r20, r20
 cec:	55 1f       	adc	r21, r21
 cee:	59 f0       	breq	.+22     	; 0xd06 <__fp_splitA+0x10>
 cf0:	5f 3f       	cpi	r21, 0xFF	; 255
 cf2:	71 f0       	breq	.+28     	; 0xd10 <__fp_splitA+0x1a>
 cf4:	47 95       	ror	r20

00000cf6 <__fp_splitA>:
 cf6:	88 0f       	add	r24, r24
 cf8:	97 fb       	bst	r25, 7
 cfa:	99 1f       	adc	r25, r25
 cfc:	61 f0       	breq	.+24     	; 0xd16 <__fp_splitA+0x20>
 cfe:	9f 3f       	cpi	r25, 0xFF	; 255
 d00:	79 f0       	breq	.+30     	; 0xd20 <__fp_splitA+0x2a>
 d02:	87 95       	ror	r24
 d04:	08 95       	ret
 d06:	12 16       	cp	r1, r18
 d08:	13 06       	cpc	r1, r19
 d0a:	14 06       	cpc	r1, r20
 d0c:	55 1f       	adc	r21, r21
 d0e:	f2 cf       	rjmp	.-28     	; 0xcf4 <__fp_split3+0xe>
 d10:	46 95       	lsr	r20
 d12:	f1 df       	rcall	.-30     	; 0xcf6 <__fp_splitA>
 d14:	08 c0       	rjmp	.+16     	; 0xd26 <__fp_splitA+0x30>
 d16:	16 16       	cp	r1, r22
 d18:	17 06       	cpc	r1, r23
 d1a:	18 06       	cpc	r1, r24
 d1c:	99 1f       	adc	r25, r25
 d1e:	f1 cf       	rjmp	.-30     	; 0xd02 <__fp_splitA+0xc>
 d20:	86 95       	lsr	r24
 d22:	71 05       	cpc	r23, r1
 d24:	61 05       	cpc	r22, r1
 d26:	08 94       	sec
 d28:	08 95       	ret

00000d2a <__fp_zero>:
 d2a:	e8 94       	clt

00000d2c <__fp_szero>:
 d2c:	bb 27       	eor	r27, r27
 d2e:	66 27       	eor	r22, r22
 d30:	77 27       	eor	r23, r23
 d32:	cb 01       	movw	r24, r22
 d34:	97 f9       	bld	r25, 7
 d36:	08 95       	ret

00000d38 <__mulsf3>:
 d38:	0e 94 af 06 	call	0xd5e	; 0xd5e <__mulsf3x>
 d3c:	0c 94 62 06 	jmp	0xcc4	; 0xcc4 <__fp_round>
 d40:	0e 94 54 06 	call	0xca8	; 0xca8 <__fp_pscA>
 d44:	38 f0       	brcs	.+14     	; 0xd54 <__mulsf3+0x1c>
 d46:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <__fp_pscB>
 d4a:	20 f0       	brcs	.+8      	; 0xd54 <__mulsf3+0x1c>
 d4c:	95 23       	and	r25, r21
 d4e:	11 f0       	breq	.+4      	; 0xd54 <__mulsf3+0x1c>
 d50:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_inf>
 d54:	0c 94 51 06 	jmp	0xca2	; 0xca2 <__fp_nan>
 d58:	11 24       	eor	r1, r1
 d5a:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_szero>

00000d5e <__mulsf3x>:
 d5e:	0e 94 73 06 	call	0xce6	; 0xce6 <__fp_split3>
 d62:	70 f3       	brcs	.-36     	; 0xd40 <__mulsf3+0x8>

00000d64 <__mulsf3_pse>:
 d64:	95 9f       	mul	r25, r21
 d66:	c1 f3       	breq	.-16     	; 0xd58 <__mulsf3+0x20>
 d68:	95 0f       	add	r25, r21
 d6a:	50 e0       	ldi	r21, 0x00	; 0
 d6c:	55 1f       	adc	r21, r21
 d6e:	62 9f       	mul	r22, r18
 d70:	f0 01       	movw	r30, r0
 d72:	72 9f       	mul	r23, r18
 d74:	bb 27       	eor	r27, r27
 d76:	f0 0d       	add	r31, r0
 d78:	b1 1d       	adc	r27, r1
 d7a:	63 9f       	mul	r22, r19
 d7c:	aa 27       	eor	r26, r26
 d7e:	f0 0d       	add	r31, r0
 d80:	b1 1d       	adc	r27, r1
 d82:	aa 1f       	adc	r26, r26
 d84:	64 9f       	mul	r22, r20
 d86:	66 27       	eor	r22, r22
 d88:	b0 0d       	add	r27, r0
 d8a:	a1 1d       	adc	r26, r1
 d8c:	66 1f       	adc	r22, r22
 d8e:	82 9f       	mul	r24, r18
 d90:	22 27       	eor	r18, r18
 d92:	b0 0d       	add	r27, r0
 d94:	a1 1d       	adc	r26, r1
 d96:	62 1f       	adc	r22, r18
 d98:	73 9f       	mul	r23, r19
 d9a:	b0 0d       	add	r27, r0
 d9c:	a1 1d       	adc	r26, r1
 d9e:	62 1f       	adc	r22, r18
 da0:	83 9f       	mul	r24, r19
 da2:	a0 0d       	add	r26, r0
 da4:	61 1d       	adc	r22, r1
 da6:	22 1f       	adc	r18, r18
 da8:	74 9f       	mul	r23, r20
 daa:	33 27       	eor	r19, r19
 dac:	a0 0d       	add	r26, r0
 dae:	61 1d       	adc	r22, r1
 db0:	23 1f       	adc	r18, r19
 db2:	84 9f       	mul	r24, r20
 db4:	60 0d       	add	r22, r0
 db6:	21 1d       	adc	r18, r1
 db8:	82 2f       	mov	r24, r18
 dba:	76 2f       	mov	r23, r22
 dbc:	6a 2f       	mov	r22, r26
 dbe:	11 24       	eor	r1, r1
 dc0:	9f 57       	subi	r25, 0x7F	; 127
 dc2:	50 40       	sbci	r21, 0x00	; 0
 dc4:	9a f0       	brmi	.+38     	; 0xdec <__mulsf3_pse+0x88>
 dc6:	f1 f0       	breq	.+60     	; 0xe04 <__mulsf3_pse+0xa0>
 dc8:	88 23       	and	r24, r24
 dca:	4a f0       	brmi	.+18     	; 0xdde <__mulsf3_pse+0x7a>
 dcc:	ee 0f       	add	r30, r30
 dce:	ff 1f       	adc	r31, r31
 dd0:	bb 1f       	adc	r27, r27
 dd2:	66 1f       	adc	r22, r22
 dd4:	77 1f       	adc	r23, r23
 dd6:	88 1f       	adc	r24, r24
 dd8:	91 50       	subi	r25, 0x01	; 1
 dda:	50 40       	sbci	r21, 0x00	; 0
 ddc:	a9 f7       	brne	.-22     	; 0xdc8 <__mulsf3_pse+0x64>
 dde:	9e 3f       	cpi	r25, 0xFE	; 254
 de0:	51 05       	cpc	r21, r1
 de2:	80 f0       	brcs	.+32     	; 0xe04 <__mulsf3_pse+0xa0>
 de4:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <__fp_inf>
 de8:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <__fp_szero>
 dec:	5f 3f       	cpi	r21, 0xFF	; 255
 dee:	e4 f3       	brlt	.-8      	; 0xde8 <__mulsf3_pse+0x84>
 df0:	98 3e       	cpi	r25, 0xE8	; 232
 df2:	d4 f3       	brlt	.-12     	; 0xde8 <__mulsf3_pse+0x84>
 df4:	86 95       	lsr	r24
 df6:	77 95       	ror	r23
 df8:	67 95       	ror	r22
 dfa:	b7 95       	ror	r27
 dfc:	f7 95       	ror	r31
 dfe:	e7 95       	ror	r30
 e00:	9f 5f       	subi	r25, 0xFF	; 255
 e02:	c1 f7       	brne	.-16     	; 0xdf4 <__mulsf3_pse+0x90>
 e04:	fe 2b       	or	r31, r30
 e06:	88 0f       	add	r24, r24
 e08:	91 1d       	adc	r25, r1
 e0a:	96 95       	lsr	r25
 e0c:	87 95       	ror	r24
 e0e:	97 f9       	bld	r25, 7
 e10:	08 95       	ret

00000e12 <__umoddi3>:
 e12:	68 94       	set
 e14:	01 c0       	rjmp	.+2      	; 0xe18 <__udivdi3_umoddi3>

00000e16 <__udivdi3>:
 e16:	e8 94       	clt

00000e18 <__udivdi3_umoddi3>:
 e18:	8f 92       	push	r8
 e1a:	9f 92       	push	r9
 e1c:	cf 93       	push	r28
 e1e:	df 93       	push	r29
 e20:	0e 94 17 07 	call	0xe2e	; 0xe2e <__udivmod64>
 e24:	df 91       	pop	r29
 e26:	cf 91       	pop	r28
 e28:	9f 90       	pop	r9
 e2a:	8f 90       	pop	r8
 e2c:	08 95       	ret

00000e2e <__udivmod64>:
 e2e:	88 24       	eor	r8, r8
 e30:	99 24       	eor	r9, r9
 e32:	f4 01       	movw	r30, r8
 e34:	e4 01       	movw	r28, r8
 e36:	b0 e4       	ldi	r27, 0x40	; 64
 e38:	9f 93       	push	r25
 e3a:	aa 27       	eor	r26, r26
 e3c:	9a 15       	cp	r25, r10
 e3e:	8b 04       	cpc	r8, r11
 e40:	9c 04       	cpc	r9, r12
 e42:	ed 05       	cpc	r30, r13
 e44:	fe 05       	cpc	r31, r14
 e46:	cf 05       	cpc	r28, r15
 e48:	d0 07       	cpc	r29, r16
 e4a:	a1 07       	cpc	r26, r17
 e4c:	98 f4       	brcc	.+38     	; 0xe74 <__udivmod64+0x46>
 e4e:	ad 2f       	mov	r26, r29
 e50:	dc 2f       	mov	r29, r28
 e52:	cf 2f       	mov	r28, r31
 e54:	fe 2f       	mov	r31, r30
 e56:	e9 2d       	mov	r30, r9
 e58:	98 2c       	mov	r9, r8
 e5a:	89 2e       	mov	r8, r25
 e5c:	98 2f       	mov	r25, r24
 e5e:	87 2f       	mov	r24, r23
 e60:	76 2f       	mov	r23, r22
 e62:	65 2f       	mov	r22, r21
 e64:	54 2f       	mov	r21, r20
 e66:	43 2f       	mov	r20, r19
 e68:	32 2f       	mov	r19, r18
 e6a:	22 27       	eor	r18, r18
 e6c:	b8 50       	subi	r27, 0x08	; 8
 e6e:	31 f7       	brne	.-52     	; 0xe3c <__udivmod64+0xe>
 e70:	bf 91       	pop	r27
 e72:	27 c0       	rjmp	.+78     	; 0xec2 <__udivmod64+0x94>
 e74:	1b 2e       	mov	r1, r27
 e76:	bf 91       	pop	r27
 e78:	bb 27       	eor	r27, r27
 e7a:	22 0f       	add	r18, r18
 e7c:	33 1f       	adc	r19, r19
 e7e:	44 1f       	adc	r20, r20
 e80:	55 1f       	adc	r21, r21
 e82:	66 1f       	adc	r22, r22
 e84:	77 1f       	adc	r23, r23
 e86:	88 1f       	adc	r24, r24
 e88:	99 1f       	adc	r25, r25
 e8a:	88 1c       	adc	r8, r8
 e8c:	99 1c       	adc	r9, r9
 e8e:	ee 1f       	adc	r30, r30
 e90:	ff 1f       	adc	r31, r31
 e92:	cc 1f       	adc	r28, r28
 e94:	dd 1f       	adc	r29, r29
 e96:	aa 1f       	adc	r26, r26
 e98:	bb 1f       	adc	r27, r27
 e9a:	8a 14       	cp	r8, r10
 e9c:	9b 04       	cpc	r9, r11
 e9e:	ec 05       	cpc	r30, r12
 ea0:	fd 05       	cpc	r31, r13
 ea2:	ce 05       	cpc	r28, r14
 ea4:	df 05       	cpc	r29, r15
 ea6:	a0 07       	cpc	r26, r16
 ea8:	b1 07       	cpc	r27, r17
 eaa:	48 f0       	brcs	.+18     	; 0xebe <__udivmod64+0x90>
 eac:	8a 18       	sub	r8, r10
 eae:	9b 08       	sbc	r9, r11
 eb0:	ec 09       	sbc	r30, r12
 eb2:	fd 09       	sbc	r31, r13
 eb4:	ce 09       	sbc	r28, r14
 eb6:	df 09       	sbc	r29, r15
 eb8:	a0 0b       	sbc	r26, r16
 eba:	b1 0b       	sbc	r27, r17
 ebc:	21 60       	ori	r18, 0x01	; 1
 ebe:	1a 94       	dec	r1
 ec0:	e1 f6       	brne	.-72     	; 0xe7a <__udivmod64+0x4c>
 ec2:	2e f4       	brtc	.+10     	; 0xece <__udivmod64+0xa0>
 ec4:	94 01       	movw	r18, r8
 ec6:	af 01       	movw	r20, r30
 ec8:	be 01       	movw	r22, r28
 eca:	cd 01       	movw	r24, r26
 ecc:	00 0c       	add	r0, r0
 ece:	08 95       	ret

00000ed0 <__ashldi3>:
 ed0:	0f 93       	push	r16
 ed2:	08 30       	cpi	r16, 0x08	; 8
 ed4:	90 f0       	brcs	.+36     	; 0xefa <__ashldi3+0x2a>
 ed6:	98 2f       	mov	r25, r24
 ed8:	87 2f       	mov	r24, r23
 eda:	76 2f       	mov	r23, r22
 edc:	65 2f       	mov	r22, r21
 ede:	54 2f       	mov	r21, r20
 ee0:	43 2f       	mov	r20, r19
 ee2:	32 2f       	mov	r19, r18
 ee4:	22 27       	eor	r18, r18
 ee6:	08 50       	subi	r16, 0x08	; 8
 ee8:	f4 cf       	rjmp	.-24     	; 0xed2 <__ashldi3+0x2>
 eea:	22 0f       	add	r18, r18
 eec:	33 1f       	adc	r19, r19
 eee:	44 1f       	adc	r20, r20
 ef0:	55 1f       	adc	r21, r21
 ef2:	66 1f       	adc	r22, r22
 ef4:	77 1f       	adc	r23, r23
 ef6:	88 1f       	adc	r24, r24
 ef8:	99 1f       	adc	r25, r25
 efa:	0a 95       	dec	r16
 efc:	b2 f7       	brpl	.-20     	; 0xeea <__ashldi3+0x1a>
 efe:	0f 91       	pop	r16
 f00:	08 95       	ret

00000f02 <_exit>:
 f02:	f8 94       	cli

00000f04 <__stop_program>:
 f04:	ff cf       	rjmp	.-2      	; 0xf04 <__stop_program>
